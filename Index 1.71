<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Police Rank Hierarchy Visualizer</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    body { background-color: #f8f9fa; padding: 20px; }
    #visualization { min-height: 500px; padding: 20px; background-color: white; border-radius: 5px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
    .rank-tier { margin-bottom: 30px; }
    .rank-title { font-weight: bold; font-size: 1.2rem; margin-bottom: 10px; padding-bottom: 5px; border-bottom: 2px solid #ddd; }
    .tray-container { display: flex; flex-wrap: wrap; gap: 10px; }
    .tray { 
        padding: 8px 15px; 
        border-radius: 4px; 
        font-weight: 500; 
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
        position: relative;
        cursor: pointer;
        transition: all 0.2s;
        flex: 1 1 120px; 
        min-width: 100px;
    }
    .tray:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .constable { background-color: #4e79a7; color: white; }
    .sergeant { background-color: #f28e2b; color: white; }
    .inspector { background-color: #e15759; color: white; }
    .chief-inspector { background-color: #b07aa1; color: white; }
    .bottom-tier { background-color: #6c757d; color: white; }
    .person-count { 
        position: absolute;
        right: -8px;
        top: -8px;
        background-color: #343a40;
        color: white;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        font-size: 11px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    #dropZone { 
        border: 3px dashed #999; 
        padding: 30px; 
        text-align: center; 
        margin-bottom: 20px;
        border-radius: 8px; 
        background-color: #fafafa; 
        cursor: pointer; 
        transition: all 0.3s; 
    }
    #dropZone.dragover { background-color: #e0f7fa; border-color: #00796b; }
    #loadingIndicator { display: none; text-align: center; margin: 20px 0; }
    .empty-state { text-align: center; padding: 40px; color: #6c757d; }
    .file-stats { background-color: #e9ecef; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
</style>
</head>
<body>
<div class="container">
    <h1 class="mb-4">Police Rank Hierarchy Visualizer</h1>
    
    <div class="alert alert-info">
        <h5>How to Use</h5>
        <ol>
            <li>Upload an Excel file with your tray data</li>
            <li>The system will automatically detect ranks from tray names</li>
            <li>See the hierarchy organized by rank level</li>
        </ol>
        <p class="mb-0">Trays are color-coded by rank and show user counts.</p>
    </div>

    <div id="dropZone" aria-label="Upload Excel file by drag & drop or click">
        <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
        <p>Drag & drop your Excel file here or click to browse</p>
    </div>
    
    <div id="fileStats" class="file-stats" style="display: none;">
        <strong>Total People:</strong> <span id="totalPeople">0</span> | 
        <strong>Total Trays:</strong> <span id="totalTrays">0</span>
    </div>
    
    <div id="loadingIndicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Processing your file...</p>
    </div>
    
    <div id="visualization">
        <div class="empty-state">
            <i class="fas fa-file-excel fa-3x mb-3"></i>
            <p>Upload an Excel file to visualize the rank hierarchy</p>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
// Rank configuration
const RANK_CONFIG = [
    { name: "Chief Inspector", class: "chief-inspector", patterns: [/chief inspector/i, /^B$/i, /^J$/i, /^L$/i, /^U$/i, /^A$/i, /^H$/i, /^S$/i, /CI\b/i] },
    { name: "Inspector", class: "inspector", patterns: [/inspector/i, /^C$/i, /^M$/i, /^V$/i, /Insp/i, /DI\b/i] },
    { name: "Sergeant", class: "sergeant", patterns: [/sergeant/i, /^D$/i, /^K2$/i, /^N$/i, /^P$/i, /^Q$/i, /Sgt/i, /DS\b/i, /PS\b/i, /supervisor/i, /super/i, /supr/i, /sup\b/i] },
    { name: "Constable", class: "constable", patterns: [/constable/i, /^E$/i, /^K1$/i, /^W$/i, /^I$/i, /PC\b/i] },
    { name: "Bottom Tier", class: "bottom-tier", patterns: [/^G$/i, /^Y$/i, /^F$/i, /^O$/i, /^T$/i, /^X$/i] }
];

const dropZone = document.getElementById('dropZone');
const loadingIndicator = document.getElementById('loadingIndicator');
const visualization = document.getElementById('visualization');

dropZone.addEventListener('click', () => {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.xlsx,.xls';
    fileInput.onchange = (e) => handleFile(e.target.files[0]);
    fileInput.click();
});

dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
    dropZone.classList.add('dragover');
});

dropZone.addEventListener('dragleave', () => dropZone.classList.remove('dragover'));

dropZone.addEventListener('drop', (e) => {
    e.preventDefault();
    dropZone.classList.remove('dragover');
    if (e.dataTransfer.files.length) handleFile(e.dataTransfer.files[0]);
});

function handleFile(file) {
    if (!file.name.match(/\.(xlsx|xls)$/i)) { showError("Please upload an Excel file (.xlsx or .xls)"); return; }
    
    showLoading();
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(firstSheet);
            processData(jsonData);
        } catch (error) {
            showError("Error processing file: " + error.message);
            console.error(error);
        } finally { hideLoading(); }
    };
    reader.onerror = () => { showError("Error reading file"); hideLoading(); };
    reader.readAsArrayBuffer(file);
}

function processData(data) {
    if (!data || data.length === 0) { showError("No data found in the Excel file"); return; }
    
    // Auto-detect tray column
    const trayColumn = Object.keys(data[0]).find(key => key.toLowerCase().includes('tray'));
    if (!trayColumn) { showError("No tray column detected. Ensure one column header contains 'tray'"); return; }
    
    const trayData = {};
    const uniqueTrays = new Set(); // To track unique tray names
    
    data.forEach(row => {
        const tray = String(row[trayColumn] || '').trim();
        if (!tray) return;
        
        // Only process if we haven't seen this tray before
        if (!uniqueTrays.has(tray)) {
            uniqueTrays.add(tray);
            const rank = detectRank(tray);
            if (rank) {
                trayData[tray] = { 
                    count: 1, // Count is now just 1 since we're showing each tray only once
                    rank: rank 
                };
            }
        }
    });
    
    const traysByRank = {};
    RANK_CONFIG.forEach(rank => traysByRank[rank.name] = []);
    
    Object.entries(trayData).forEach(([tray, tData]) => {
        if (tData.rank) traysByRank[tData.rank.name].push({ name: tray, count: tData.count });
    });
    
    // Sort trays by name
    for (const rank in traysByRank) traysByRank[rank].sort((a,b) => a.name.localeCompare(b.name));
    
    const totalPeople = data.length; // Total rows in the file
    const totalTrays = Object.keys(trayData).length;
    document.getElementById('totalPeople').textContent = totalPeople;
    document.getElementById('totalTrays').textContent = totalTrays;
    document.getElementById('fileStats').style.display = 'block';
    
    visualizeHierarchy(traysByRank);
}

function detectRank(trayName) {
    for (const rank of RANK_CONFIG) {
        if (rank.patterns.some(p => p.test(trayName))) return rank;
    }
    return null;
}

function visualizeHierarchy(traysByRank) {
    visualization.innerHTML = '';
    let hasTrays = false;
    
    RANK_CONFIG.forEach(rank => {
        const trays = traysByRank[rank.name];
        if (!trays || trays.length === 0) return;
        hasTrays = true;
        
        const tierDiv = document.createElement('div');
        tierDiv.className = 'rank-tier';
        
        const titleDiv = document.createElement('div');
        titleDiv.className = 'rank-title';
        titleDiv.textContent = rank.name;
        tierDiv.appendChild(titleDiv);
        
        const containerDiv = document.createElement('div');
        containerDiv.className = 'tray-container';
        
        trays.forEach(tray => {
            const trayDiv = document.createElement('div');
            trayDiv.className = `tray ${rank.class}`;
            trayDiv.textContent = tray.name;
            
            // Removed the person count since we're showing each tray only once
            containerDiv.appendChild(trayDiv);
        });
        
        tierDiv.appendChild(containerDiv);
        visualization.appendChild(tierDiv);
    });
    
    if (!hasTrays) {
        visualization.innerHTML = `<div class="empty-state">No trays matched the rank patterns.</div>`;
    }
}

function showLoading() { loadingIndicator.style.display = 'block'; visualization.innerHTML = ''; }
function hideLoading() { loadingIndicator.style.display = 'none'; }
function showError(message) {
    visualization.innerHTML = `<div class="alert alert-danger"><i class="fas fa-exclamation-triangle me-2"></i>${message}</div>`;
}
</script>
</body>
</html>
