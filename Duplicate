Option Explicit

Sub RefreshAllData()
    ' MASTER REFRESH BUTTON - Does everything in one click
    Dim startTime As Double
    startTime = Timer
    
    ' Turn off everything for speed
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayStatusBar = True
    
    On Error GoTo ErrorHandler
    
    Dim wsHome As Worksheet, wsHR As Worksheet, wsUnit As Worksheet
    Set wsHome = SafeSheet("Home")
    Set wsHR = SafeSheet("HR_Feed")
    Set wsUnit = SafeSheet("Unit")
    
    If wsHome Is Nothing Or wsHR Is Nothing Or wsUnit Is Nothing Then
        MsgBox "One or more required sheets are missing!" & vbCrLf & _
               "Check sheet names: Home, HR_Feed, Unit", vbCritical, "Error"
        GoTo Cleanup
    End If
    
    ' Clear previous results
    wsHome.Cells.Clear
    wsHome.Range("A1").Value = "üîÑ REFRESHING ALL DATA..."
    wsHome.Range("A1").Font.Color = RGB(0, 0, 255)
    wsHome.Range("A1").Font.Bold = True
    DoEvents
    
    ' STEP 1: Refresh all data connections
    Application.StatusBar = "Step 1/4: Refreshing data connections..."
    RefreshAllConnections
    
    ' STEP 2: Get unit usage data
    Application.StatusBar = "Step 2/4: Analyzing unit usage..."
    GetUnitUsageData wsHome, wsHR, wsUnit
    
    ' STEP 3: Get employee validation data (Now uses HR_Feed instead of HE_Feed)
    Application.StatusBar = "Step 3/4: Validating employee data..."
    GetEmployeeValidationData wsHome, wsHR
    
    ' STEP 4: Format everything
    Application.StatusBar = "Step 4/4: Formatting results..."
    FormatAllResults wsHome
    
    ' Show completion
    Dim elapsedTime As Double
    elapsedTime = Round(Timer - startTime, 2)
    
    wsHome.Range("A1").Value = "‚úÖ REFRESH COMPLETE! (" & elapsedTime & "s)"
    wsHome.Range("A1").Font.Color = RGB(0, 128, 0)
    Application.StatusBar = False
    
    MsgBox "All data refreshed successfully!" & vbCrLf & _
           "Time: " & elapsedTime & " seconds" & vbCrLf & _
           "Check the Home sheet for results.", vbInformation, "Refresh Complete"
    
Cleanup:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.StatusBar = False
    Exit Sub
    
ErrorHandler:
    wsHome.Range("A1").Value = "‚ùå ERROR: " & Err.Description
    wsHome.Range("A1").Font.Color = RGB(255, 0, 0)
    MsgBox "Error occurred: " & Err.Description, vbCritical, "Error"
    Resume Cleanup
End Sub

' -----------------------
' HELPER: Safe sheet lookup
' -----------------------
Private Function SafeSheet(sName As String) As Worksheet
    On Error Resume Next
    Set SafeSheet = ThisWorkbook.Sheets(sName)
    On Error GoTo 0
End Function

' -----------------------
' STEP 1: Refresh all connections
' -----------------------
Private Sub RefreshAllConnections()
    Dim refreshCount As Integer: refreshCount = 0
    Dim conn As WorkbookConnection
    Dim qt As QueryTable
    Dim ws As Worksheet
    
    ' Refresh all workbook connections
    For Each conn In ThisWorkbook.Connections
        On Error Resume Next
        If conn.Type = xlConnectionTypeOLEDB Or conn.Type = xlConnectionTypeODBC Then
            conn.Refresh
            If Err.Number = 0 Then refreshCount = refreshCount + 1
        End If
        On Error GoTo 0
    Next conn
    
    ' Refresh all query tables (old-style) on all sheets
    For Each ws In ThisWorkbook.Worksheets
        For Each qt In ws.QueryTables
            On Error Resume Next
            qt.Refresh BackgroundQuery:=False
            If Err.Number = 0 Then refreshCount = refreshCount + 1
            On Error GoTo 0
        Next qt
    Next ws
    
    ' Refresh data model if available
    On Error Resume Next
    ThisWorkbook.Model.Refresh
    If Err.Number = 0 Then refreshCount = refreshCount + 1
    On Error GoTo 0
End Sub

' -----------------------
' STEP 2: Unit usage data
' -----------------------
Private Sub GetUnitUsageData(wsHome As Worksheet, wsHR As Worksheet, wsUnit As Worksheet)
    Dim dictInUse As Object, dictAllUnits As Object
    Set dictInUse = CreateObject("Scripting.Dictionary")
    Set dictAllUnits = CreateObject("Scripting.Dictionary")
    
    ' Get all units from Unit sheet
    Dim lastRow As Long, i As Long
    lastRow = wsUnit.Cells(wsUnit.Rows.Count, "A").End(xlUp).Row
    For i = 2 To lastRow
        If wsUnit.Cells(i, 1).Value <> "" Then
            dictAllUnits(Trim(wsUnit.Cells(i, 1).Value)) = True
        End If
    Next i
    
    ' Find units in use from HR_Feed columns Z and AB
    lastRow = wsHR.Cells(wsHR.Rows.Count, "Z").End(xlUp).Row
    For i = 2 To lastRow
        If wsHR.Cells(i, 26).Value <> "" Then dictInUse(Trim(wsHR.Cells(i, 26).Value)) = True
        If wsHR.Cells(i, 28).Value <> "" Then dictInUse(Trim(wsHR.Cells(i, 28).Value)) = True
    Next i
    
    ' Output unit counts
    wsHome.Range("D1").Value = dictInUse.Count
    wsHome.Range("E1").Value = dictAllUnits.Count - dictInUse.Count
    wsHome.Range("D2").Value = "UNITS IN USE"
    wsHome.Range("E2").Value = "UNITS NOT IN USE"
    
    ' Output units in use (Column D)
    Dim outputRow As Long: outputRow = 3
    Dim unit As Variant
    For Each unit In dictInUse.Keys
        wsHome.Cells(outputRow, 4).Value = unit
        outputRow = outputRow + 1
    Next unit
    
    ' Output units not in use (Column E)
    outputRow = 3
    For Each unit In dictAllUnits.Keys
        If Not dictInUse.Exists(unit) Then
            wsHome.Cells(outputRow, 5).Value = unit
            outputRow = outputRow + 1
        End If
    Next unit
    
    Set dictInUse = Nothing
    Set dictAllUnits = Nothing
End Sub

' -----------------------
' STEP 3: Employee validation data (CORRECTED - Uses only HR_Feed)
' -----------------------
Private Sub GetEmployeeValidationData(wsHome As Worksheet, wsHR As Worksheet)
    ' Set up headers
    wsHome.Range("G1").Value = "EMPLOYEE VALIDATION RESULTS"
    wsHome.Range("G2").Value = "Employee Name"
    wsHome.Range("H2").Value = "Status"
    wsHome.Range("I2").Value = "In HR"
    wsHome.Range("J2").Value = "Supervisor"
    wsHome.Range("K2").Value = "Work Tray"
    wsHome.Range("L2").Value = "Has Data"
    
    Dim lastRowHR As Long, i As Long, j As Long
    lastRowHR = wsHR.Cells(wsHR.Rows.Count, "A").End(xlUp).Row
    
    Dim resultRow As Long: resultRow = 3
    Dim givenName As String, supervisor As String, workTray As String
    Dim foundInHR As Boolean, foundSupervisor As Boolean, foundWorkTray As Boolean, hasData As Boolean
    
    For i = 2 To lastRowHR
        givenName = Trim(wsHR.Cells(i, 6).Value & " " & wsHR.Cells(i, 7).Value)
        supervisor = Trim(wsHR.Cells(i, 21).Value)
        workTray = Trim(wsHR.Cells(i, 26).Value)
        
        ' Reset flags
        foundInHR = False
        foundSupervisor = False
        foundWorkTray = False
        hasData = False
        
        ' Check HR database for matches (checking against itself)
        For j = 2 To lastRowHR
            If InStr(1, CStr(wsHR.Cells(j, 1).Value), givenName, vbTextCompare) > 0 Then foundInHR = True
            If InStr(1, CStr(wsHR.Cells(j, 1).Value), supervisor, vbTextCompare) > 0 Then foundSupervisor = True
            If CStr(wsHR.Cells(j, 1).Value) = workTray Then foundWorkTray = True
        Next j
        
        ' Check columns H-Q for any data
        For j = 8 To 17 ' Columns H to Q
            If wsHR.Cells(i, j).Value <> "" Then
                hasData = True
                Exit For
            End If
        Next j
        
        ' Output results to Home sheet
        wsHome.Cells(resultRow, 7).Value = givenName ' Column G
        If foundInHR And foundSupervisor And foundWorkTray And hasData Then
            wsHome.Cells(resultRow, 8).Value = "VALID"
        Else
            wsHome.Cells(resultRow, 8).Value = "INVALID"
        End If
        wsHome.Cells(resultRow, 9).Value = IIf(foundInHR, "‚úì", "‚úó")
        wsHome.Cells(resultRow, 10).Value = IIf(foundSupervisor, "‚úì", "‚úó")
        wsHome.Cells(resultRow, 11).Value = IIf(foundWorkTray, "‚úì", "‚úó")
        wsHome.Cells(resultRow, 12).Value = IIf(hasData, "‚úì", "‚úó")
        
        resultRow = resultRow + 1
    Next i
End Sub

' -----------------------
' STEP 4: Formatting
' -----------------------
Private Sub FormatAllResults(wsHome As Worksheet)
    Dim i As Long, lastRow As Long
    
    ' Format unit usage section
    With wsHome.Range("D1:E1")
        .Font.Bold = True
        .Font.Size = 14
        .Interior.Color = RGB(200, 200, 200)
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = xlContinuous
    End With
    
    With wsHome.Range("D2:E2")
        .Font.Bold = True
        .Interior.Color = RGB(180, 180, 180)
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = xlContinuous
    End With
    
    ' Format employee validation section
    With wsHome.Range("G1")
        .Font.Bold = True
        .Font.Size = 12
        .Interior.Color = RGB(200, 200, 200)
        .HorizontalAlignment = xlCenter
    End With
    
    With wsHome.Range("G2:L2")
        .Font.Bold = True
        .Interior.Color = RGB(180, 180, 180)
        .HorizontalAlignment = xlCenter
        .Borders.LineStyle = xlContinuous
    End With
    
    ' Color code validation results
    lastRow = wsHome.Cells(wsHome.Rows.Count, "H").End(xlUp).Row
    For i = 3 To lastRow
        If wsHome.Cells(i, 8).Value = "VALID" Then
            wsHome.Cells(i, 8).Interior.Color = RGB(146, 208, 80) ' Green
        Else
            wsHome.Cells(i, 8).Interior.Color = RGB(255, 199, 206) ' Red
        End If
    Next i
    
    ' Add borders to data
    If wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row > 2 Then
        With wsHome.Range("D3:E" & wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row)
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
        End With
    End If
    
    If wsHome.Cells(wsHome.Rows.Count, "G").End(xlUp).Row > 2 Then
        With wsHome.Range("G3:L" & wsHome.Cells(wsHome.Rows.Count, "G").End(xlUp).Row)
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
        End With
    End If
    
    ' Auto-fit all columns
    wsHome.Columns("D:L").AutoFit
    
    ' Sort unit lists alphabetically
    On Error Resume Next
    If wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row > 3 Then
        wsHome.Range("D3:D" & wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row).Sort Key1:=wsHome.Range("D3"), Order1:=xlAscending
    End If
    If wsHome.Cells(wsHome.Rows.Count, "E").End(xlUp).Row > 3 Then
        wsHome.Range("E3:E" & wsHome.Cells(wsHome.Rows.Count, "E").End(xlUp).Row).Sort Key1:=wsHome.Range("E3"), Order1:=xlAscending
    End If
    On Error GoTo 0
    
    ' Add some spacing
    wsHome.Columns("F").ColumnWidth = 2
End Sub
