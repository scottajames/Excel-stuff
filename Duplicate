Sub RefreshAllData()
    ' Main procedure - runs everything with one click
    Dim startTime As Double
    startTime = Timer
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayStatusBar = True
    
    On Error GoTo ErrorHandler
    
    Dim wsHome As Worksheet
    Set wsHome = ThisWorkbook.Sheets("Home")
    
    ' Clear previous data
    wsHome.Range("A1").Value = "Starting refresh process..."
    wsHome.Range("A1").Font.Color = RGB(0, 0, 255)
    wsHome.Range("D1:Z1000").ClearContents
    wsHome.Range("D1:Z1000").ClearFormats
    DoEvents
    
    ' Step 1: Refresh data queries
    Application.StatusBar = "Refreshing data queries..."
    RefreshDataQueries
    
    ' Step 2: Track unit usage
    Application.StatusBar = "Tracking unit usage..."
    TrackUnitUsage
    
    ' Step 3: Check employee data
    Application.StatusBar = "Validating employee data..."
    CheckEmployeeData
    
    ' Step 4: Format the output
    Application.StatusBar = "Formatting results..."
    FormatOutput
    
    ' Final status
    Dim elapsedTime As Double
    elapsedTime = Round(Timer - startTime, 2)
    
    wsHome.Range("A1").Value = "REFRESH COMPLETE - " & elapsedTime & " seconds"
    wsHome.Range("A1").Font.Color = RGB(0, 128, 0)
    Application.StatusBar = False
    
    MsgBox "All data refreshed successfully!" & vbCrLf & _
           "Time taken: " & elapsedTime & " seconds", vbInformation, "Complete"
    
Cleanup:
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    Application.StatusBar = False
    Exit Sub
    
ErrorHandler:
    wsHome.Range("A1").Value = "ERROR: " & Err.Description
    wsHome.Range("A1").Font.Color = RGB(255, 0, 0)
    MsgBox "Error occurred: " & Err.Description, vbCritical, "Error"
    Resume Cleanup
End Sub

Private Sub RefreshDataQueries()
    Dim wsHome As Worksheet
    Set wsHome = ThisWorkbook.Sheets("Home")
    
    wsHome.Range("A1").Value = "Refreshing data connections..."
    DoEvents
    
    Dim refreshCount As Integer: refreshCount = 0
    Dim conn As WorkbookConnection
    Dim qt As QueryTable
    
    ' Refresh all workbook connections
    For Each conn In ThisWorkbook.Connections
        On Error Resume Next
        conn.Refresh
        If Err.Number = 0 Then refreshCount = refreshCount + 1
        On Error GoTo 0
    Next conn
    
    ' Refresh all query tables
    For Each qt In ThisWorkbook.QueryTables
        On Error Resume Next
        qt.Refresh BackgroundQuery:=False
        If Err.Number = 0 Then refreshCount = refreshCount + 1
        On Error GoTo 0
    Next qt
    
    ' Refresh data model if available
    On Error Resume Next
    ThisWorkbook.Model.Refresh
    If Err.Number = 0 Then refreshCount = refreshCount + 1
    On Error GoTo 0
    
    wsHome.Range("A1").Value = "Refreshed " & refreshCount & " data connections"
End Sub

Private Sub TrackUnitUsage()
    Dim wsHome As Worksheet, wsHR As Worksheet, wsUnit As Worksheet
    Set wsHome = ThisWorkbook.Sheets("Home")
    Set wsHR = ThisWorkbook.Sheets("HR_Feed")
    Set wsUnit = ThisWorkbook.Sheets("Unit")
    
    wsHome.Range("A1").Value = "Analyzing unit usage..."
    DoEvents
    
    Dim dictInUse As Object, dictAllUnits As Object
    Set dictInUse = CreateObject("Scripting.Dictionary")
    Set dictAllUnits = CreateObject("Scripting.Dictionary")
    
    ' Get all units
    Dim lastRow As Long, i As Long
    lastRow = wsUnit.Cells(wsUnit.Rows.Count, "A").End(xlUp).Row
    For i = 2 To lastRow
        If wsUnit.Cells(i, 1).Value <> "" Then
            dictAllUnits(Trim(wsUnit.Cells(i, 1).Value)) = True
        End If
    Next i
    
    ' Find units in use from HR_Feed
    lastRow = wsHR.Cells(wsHR.Rows.Count, "Z").End(xlUp).Row
    For i = 2 To lastRow
        ' Check column Z
        If wsHR.Cells(i, 26).Value <> "" Then
            dictInUse(Trim(wsHR.Cells(i, 26).Value)) = True
        End If
        ' Check column AB
        If wsHR.Cells(i, 28).Value <> "" Then
            dictInUse(Trim(wsHR.Cells(i, 28).Value)) = True
        End If
    Next i
    
    ' Output results to Home sheet
    wsHome.Range("D1").Value = dictInUse.Count
    wsHome.Range("E1").Value = dictAllUnits.Count - dictInUse.Count
    wsHome.Range("D2").Value = "UNITS IN USE"
    wsHome.Range("E2").Value = "UNITS NOT IN USE"
    
    ' List units in use
    Dim outputRow As Long: outputRow = 3
    Dim unit As Variant
    For Each unit In dictInUse.Keys
        wsHome.Cells(outputRow, 4).Value = unit
        outputRow = outputRow + 1
    Next unit
    
    ' List units not in use
    outputRow = 3
    For Each unit In dictAllUnits.Keys
        If Not dictInUse.Exists(unit) Then
            wsHome.Cells(outputRow, 5).Value = unit
            outputRow = outputRow + 1
        End If
    Next unit
    
    ' Clean up
    Set dictInUse = Nothing
    Set dictAllUnits = Nothing
End Sub

Private Sub CheckEmployeeData()
    Dim wsHome As Worksheet, wsHE As Worksheet, wsHR As Worksheet
    Set wsHome = ThisWorkbook.Sheets("Home")
    Set wsHE = ThisWorkbook.Sheets("HE_Feed")
    Set wsHR = ThisWorkbook.Sheets("HR_Feed")
    
    wsHome.Range("A1").Value = "Validating employee data..."
    DoEvents
    
    ' Set up headers
    wsHome.Range("F1").Value = "EMPLOYEE VALIDATION RESULTS"
    wsHome.Range("F2").Value = "Employee Name"
    wsHome.Range("G2").Value = "Status"
    wsHome.Range("H2").Value = "In HR"
    wsHome.Range("I2").Value = "Supervisor"
    wsHome.Range("J2").Value = "Work Tray"
    wsHome.Range("K2").Value = "Has Data"
    
    Dim lastRowHE As Long, lastRowHR As Long, i As Long, j As Long
    lastRowHE = wsHE.Cells(wsHE.Rows.Count, "A").End(xlUp).Row
    lastRowHR = wsHR.Cells(wsHR.Rows.Count, "A").End(xlUp).Row
    
    Dim resultRow As Long: resultRow = 3
    Dim givenName As String, supervisor As String, workTray As String
    Dim foundInHR As Boolean, foundSupervisor As Boolean, foundWorkTray As Boolean, hasData As Boolean
    
    For i = 2 To lastRowHE
        givenName = Trim(wsHE.Cells(i, 6).Value & " " & wsHE.Cells(i, 7).Value)
        supervisor = Trim(wsHE.Cells(i, 21).Value)
        workTray = Trim(wsHE.Cells(i, 26).Value)
        
        ' Reset flags
        foundInHR = False
        foundSupervisor = False
        foundWorkTray = False
        hasData = False
        
        ' Check HR database
        For j = 2 To lastRowHR
            If InStr(1, wsHR.Cells(j, 1).Value, givenName, vbTextCompare) > 0 Then foundInHR = True
            If InStr(1, wsHR.Cells(j, 1).Value, supervisor, vbTextCompare) > 0 Then foundSupervisor = True
            If wsHR.Cells(j, 1).Value = workTray Then foundWorkTray = True
        Next j
        
        ' Check for data in columns H-Q
        For j = 8 To 17 ' Columns H to Q
            If wsHE.Cells(i, j).Value <> "" Then
                hasData = True
                Exit For
            End If
        Next j
        
        ' Output results
        wsHome.Cells(resultRow, 6).Value = givenName ' Column F
        If foundInHR And foundSupervisor And foundWorkTray And hasData Then
            wsHome.Cells(resultRow, 7).Value = "VALID"
        Else
            wsHome.Cells(resultRow, 7).Value = "INVALID"
        End If
        wsHome.Cells(resultRow, 8).Value = IIf(foundInHR, "✓", "✗")
        wsHome.Cells(resultRow, 9).Value = IIf(foundSupervisor, "✓", "✗")
        wsHome.Cells(resultRow, 10).Value = IIf(foundWorkTray, "✓", "✗")
        wsHome.Cells(resultRow, 11).Value = IIf(hasData, "✓", "✗")
        
        resultRow = resultRow + 1
    Next i
End Sub

Private Sub FormatOutput()
    Dim wsHome As Worksheet
    Set wsHome = ThisWorkbook.Sheets("Home")
    
    wsHome.Range("A1").Value = "Formatting results..."
    DoEvents
    
    ' Format unit counts
    With wsHome.Range("D1:E1")
        .Font.Bold = True
        .Font.Size = 14
        .Interior.Color = RGB(200, 200, 200)
        .HorizontalAlignment = xlCenter
    End With
    
    With wsHome.Range("D2:E2")
        .Font.Bold = True
        .Interior.Color = RGB(180, 180, 180)
        .HorizontalAlignment = xlCenter
    End With
    
    ' Format employee validation headers
    With wsHome.Range("F1")
        .Font.Bold = True
        .Font.Size = 12
        .Interior.Color = RGB(200, 200, 200)
        .HorizontalAlignment = xlCenter
    End With
    
    With wsHome.Range("F2:K2")
        .Font.Bold = True
        .Interior.Color = RGB(180, 180, 180)
        .HorizontalAlignment = xlCenter
    End With
    
    ' Color code validation results
    Dim lastRow As Long
    lastRow = wsHome.Cells(wsHome.Rows.Count, "G").End(xlUp).Row
    
    For i = 3 To lastRow
        If wsHome.Cells(i, 7).Value = "VALID" Then
            wsHome.Cells(i, 7).Interior.Color = RGB(146, 208, 80) ' Green
        Else
            wsHome.Cells(i, 7).Interior.Color = RGB(255, 199, 206) ' Red
        End If
    Next i
    
    ' Add borders
    If wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row > 2 Then
        With wsHome.Range("D2:E" & wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row)
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
        End With
    End If
    
    If wsHome.Cells(wsHome.Rows.Count, "F").End(xlUp).Row > 2 Then
        With wsHome.Range("F2:K" & wsHome.Cells(wsHome.Rows.Count, "F").End(xlUp).Row)
            .Borders.LineStyle = xlContinuous
            .Borders.Weight = xlThin
        End With
    End If
    
    ' Auto-fit columns
    wsHome.Columns("D:K").AutoFit
    
    ' Sort unit lists alphabetically
    On Error Resume Next
    If wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row > 3 Then
        wsHome.Range("D3:D" & wsHome.Cells(wsHome.Rows.Count, "D").End(xlUp).Row).Sort Key1:=wsHome.Range("D3"), Order1:=xlAscending
    End If
    If wsHome.Cells(wsHome.Rows.Count, "E").End(xlUp).Row > 3 Then
        wsHome.Range("E3:E" & wsHome.Cells(wsHome.Rows.Count, "E").End(xlUp).Row).Sort Key1:=wsHome.Range("E3"), Order1:=xlAscending
    End If
    On Error GoTo 0
End Sub
