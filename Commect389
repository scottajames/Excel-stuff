<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Excel Hierarchy Viewer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        .upload-container {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            margin-bottom: 20px;
        }
        #fileInput {
            display: none;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
        }
        button:hover {
            background-color: #45a049;
        }
        #hierarchyResults {
            margin-top: 20px;
        }
        .tree {
            list-style-type: none;
            padding-left: 20px;
        }
        .tree li {
            position: relative;
            padding-left: 15px;
            margin: 5px 0;
        }
        .tree li:before {
            content: "";
            position: absolute;
            left: 0;
            top: 10px;
            width: 10px;
            height: 1px;
            background: #333;
        }
        .tree li:after {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 1px;
            background: #333;
        }
        .tree li:last-child:after {
            height: 10px;
        }
        .node {
            background-color: #f5f5f5;
            padding: 2px 5px;
            border-radius: 3px;
            display: inline-block;
        }
        .root {
            background-color: #dff0d8;
            font-weight: bold;
        }
        .missing {
            background-color: #ffdddd;
            color: #d9534f;
            font-weight: bold;
        }
        .section {
            margin-bottom: 30px;
            border-bottom: 1px solid #eee;
            padding-bottom: 20px;
        }
    </style>
</head>
<body>
    <h1>Excel Hierarchy Viewer</h1>
    <p>Upload an Excel file to view parent-child hierarchies from Sheet1 (Column P = Child, Column Q = Parent) and check against Sheet2 (Column A)</p>
    
    <div class="upload-container">
        <input type="file" id="fileInput" accept=".xlsx, .xls" />
        <button onclick="document.getElementById('fileInput').click()">Choose Excel File</button>
        <p id="fileName">No file chosen</p>
    </div>
    
    <div id="hierarchyResults"></div>

    <script>
        document.getElementById('fileInput').addEventListener('change', handleFile);
        
        function handleFile(e) {
            const file = e.target.files[0];
            if (!file) return;
            
            document.getElementById('fileName').textContent = `Selected: ${file.name}`;
            document.getElementById('hierarchyResults').innerHTML = '<p>Processing file...</p>';
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    processWorkbook(workbook);
                } catch (error) {
                    document.getElementById('hierarchyResults').innerHTML = 
                        `<p style="color: red;">Error processing file: ${error.message}</p>`;
                }
            };
            reader.readAsArrayBuffer(file);
        }
        
        function processWorkbook(workbook) {
            const resultsDiv = document.getElementById('hierarchyResults');
            resultsDiv.innerHTML = '';
            
            // Process Sheet1 (P=Child, Q=Parent)
            const sheet1Name = workbook.SheetNames.includes('Sheet1') ? 'Sheet1' : 
                             (workbook.SheetNames.includes('sheet1') ? 'sheet1' : workbook.SheetNames[0]);
            const sheet2Name = workbook.SheetNames.includes('Sheet2') ? 'Sheet2' : 
                             (workbook.SheetNames.includes('sheet2') ? 'sheet2' : workbook.SheetNames[1]);
            
            if (!sheet1Name || !sheet2Name) {
                resultsDiv.innerHTML = '<p style="color: red;">Both Sheet1 and Sheet2 are required in the Excel file.</p>';
                return;
            }
            
            const worksheet1 = workbook.Sheets[sheet1Name];
            const jsonData1 = XLSX.utils.sheet_to_json(worksheet1, { header: 1 });
            
            // Column P (index 15) = Child, Column Q (index 16) = Parent
            const relationships = [];
            const allItemsFromSheet1 = new Set();
            
            for (let i = 1; i < jsonData1.length; i++) {
                const child = jsonData1[i][15] ? String(jsonData1[i][15]).trim() : null;
                const parent = jsonData1[i][16] ? String(jsonData1[i][16]).trim() : null;
                
                if (child) {
                    relationships.push({ child, parent });
                    allItemsFromSheet1.add(child);
                    if (parent) allItemsFromSheet1.add(parent);
                }
            }
            
            // Build hierarchy from Sheet1
            const hierarchy = buildHierarchy(relationships);
            
            // Process Sheet2 (Column A)
            const worksheet2 = workbook.Sheets[sheet2Name];
            const jsonData2 = XLSX.utils.sheet_to_json(worksheet2, { header: 1 });
            
            const itemsFromSheet2 = new Set();
            for (let i = 1; i < jsonData2.length; i++) {
                const item = jsonData2[i][0] ? String(jsonData2[i][0]).trim() : null;
                if (item) {
                    itemsFromSheet2.add(item);
                }
            }
            
            // Find items in Sheet2 that aren't in Sheet1
            const missingItems = [];
            itemsFromSheet2.forEach(item => {
                if (!allItemsFromSheet1.has(item)) {
                    missingItems.push(item);
                }
            });
            
            // Display results
            displayHierarchy(hierarchy);
            displayMissingItems(missingItems);
        }
        
        function buildHierarchy(relationships) {
            const childToParent = new Map();
            const parentToChildren = new Map();
            
            // Create mappings
            relationships.forEach(rel => {
                childToParent.set(rel.child, rel.parent);
                
                if (rel.parent) {
                    if (!parentToChildren.has(rel.parent)) {
                        parentToChildren.set(rel.parent, []);
                    }
                    parentToChildren.get(rel.parent).push(rel.child);
                }
            });
            
            // Find root nodes (items with no parent or parents that don't exist as children)
            const rootNodes = [];
            const allChildren = new Set(childToParent.keys());
            
            // Items with no parent
            relationships.forEach(rel => {
                if (!rel.parent && !rootNodes.includes(rel.child)) {
                    rootNodes.push(rel.child);
                }
            });
            
            // Parents that aren't children themselves
            parentToChildren.forEach((children, parent) => {
                if (!allChildren.has(parent) && !rootNodes.includes(parent)) {
                    rootNodes.push(parent);
                }
            });
            
            // If no root nodes found, just use all unique parents
            if (rootNodes.length === 0) {
                const allParents = new Set(relationships.filter(r => r.parent).map(r => r.parent));
                rootNodes.push(...allParents);
            }
            
            // Build hierarchy tree for each root
            const hierarchy = {};
            rootNodes.forEach(root => {
                hierarchy[root] = buildTree(root, parentToChildren);
            });
            
            return hierarchy;
        }
        
        function buildTree(node, parentToChildren, depth = 0, visited = new Set()) {
            if (visited.has(node)) return {}; // Prevent circular references
            visited.add(node);
            
            const tree = {};
            
            if (parentToChildren.has(node)) {
                parentToChildren.get(node).forEach(child => {
                    tree[child] = buildTree(child, parentToChildren, depth + 1, visited);
                });
            }
            
            return tree;
        }
        
        function displayHierarchy(hierarchy) {
            const resultsDiv = document.getElementById('hierarchyResults');
            
            if (Object.keys(hierarchy).length === 0) {
                resultsDiv.innerHTML += '<div class="section"><p>No hierarchy data found in Sheet1 (columns P and Q)</p></div>';
                return;
            }
            
            let html = '<div class="section"><h2>Hierarchy from Sheet1 (P=Child, Q=Parent)</h2>';
            
            Object.keys(hierarchy).forEach(root => {
                html += `<div class="tree-container"><h3>Root: <span class="node root">${root}</span></h3>`;
                html += '<ul class="tree">';
                html += buildTreeHTML(hierarchy[root]);
                html += '</ul></div>';
            });
            
            html += '</div>';
            resultsDiv.innerHTML += html;
        }
        
        function displayMissingItems(missingItems) {
            const resultsDiv = document.getElementById('hierarchyResults');
            
            let html = '<div class="section"><h2>Items from Sheet2 (Column A) not found in Sheet1</h2>';
            
            if (missingItems.length === 0) {
                html += '<p>All items from Sheet2 were found in Sheet1</p>';
            } else {
                html += '<p>The following items were in Sheet2 but not found in Sheet1:</p><ul>';
                missingItems.forEach(item => {
                    html += `<li><span class="node missing">${item}</span></li>`;
                });
                html += '</ul>';
            }
            
            html += '</div>';
            resultsDiv.innerHTML += html;
        }
        
        function buildTreeHTML(tree, level = 1) {
            let html = '';
            
            Object.keys(tree).forEach(child => {
                html += `<li><span class="node">${child}</span>`;
                
                if (Object.keys(tree[child]).length > 0) {
                    html += '<ul>';
                    html += buildTreeHTML(tree[child], level + 1);
                    html += '</ul>';
                }
                
                html += '</li>';
            });
            
            return html;
        }
    </script>
</body>
</html>
