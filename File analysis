<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weekly File Comparison Tool</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 20px;
            overflow: hidden;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }
        
        .description {
            color: #7f8c8d;
            font-size: 1.1rem;
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .week-info {
            text-align: center;
            margin: 20px 0;
            padding: 15px;
            background: #e8f4fc;
            border-radius: 8px;
            font-weight: 600;
        }
        
        .status-section {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .status-indicator {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: 600;
        }
        
        .status-active {
            background: #2ecc71;
            color: white;
        }
        
        .status-inactive {
            background: #95a5a6;
            color: white;
        }
        
        .status-error {
            background: #e74c3c;
            color: white;
        }
        
        .results-section {
            margin-top: 30px;
        }
        
        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .comparison-result {
            margin-bottom: 30px;
            padding: 20px;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .match {
            border-left: 5px solid #2ecc71;
        }
        
        .diff {
            border-left: 5px solid #e74c3c;
        }
        
        .file-content {
            white-space: pre-wrap;
            background: white;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
        }
        
        .error-section {
            background: #ffeaa7;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            border-left: 5px solid #fdcb6e;
        }
        
        .file-list {
            margin: 20px 0;
        }
        
        .file-item {
            padding: 10px 15px;
            margin: 10px 0;
            background: white;
            border-radius: 5px;
            border-left: 5px solid #3498db;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .file-missing {
            border-left: 5px solid #e74c3c;
        }
        
        .file-new {
            border-left: 5px solid #2ecc71;
        }
        
        .history-section {
            margin-top: 40px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .history-item {
            padding: 15px;
            margin: 10px 0;
            background: white;
            border-radius: 5px;
            border-left: 5px solid #3498db;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            transform: translateX(100px);
            transition: all 0.3s ease;
        }
        
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .notification-success {
            background: #2ecc71;
        }
        
        .notification-error {
            background: #e74c3c;
        }
        
        .notification-warning {
            background: #f39c12;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
        }
        
        @media (max-width: 768px) {
            .status-header {
                flex-direction: column;
                align-items: flex-start;
            }
            
            .status-indicator {
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Weekly File Comparison Tool</h1>
            <p class="description">
                This tool automatically checks for differences between your PC and server files for the current week.
                It detects missing files, content differences, and error messages without any manual input.
            </p>
        </header>
        
        <div class="week-info">
            <h3>Checking files for the week of <span id="week-range"></span></h3>
        </div>
        
        <section class="status-section">
            <div class="status-header">
                <h2>Comparison Status</h2>
                <span id="status-indicator" class="status-indicator status-active">CHECKING...</span>
            </div>
            <div id="status-message">Scanning files for the current week...</div>
        </section>
        
        <section class="results-section">
            <div class="results-header">
                <h2>Comparison Results</h2>
            </div>
            <div id="results-content">
                <div id="comparison-result" class="comparison-result">
                    <p>Scanning files... Please wait.</p>
                </div>
                
                <div id="file-differences" class="file-list" style="display: none;">
                    <h3>File Differences</h3>
                    <div id="file-diff-list"></div>
                </div>
                
                <div id="error-section" class="error-section" style="display: none;">
                    <h3>Error Messages from Server Files</h3>
                    <div id="error-content"></div>
                </div>
            </div>
        </section>
        
        <section class="history-section">
            <h2>Weekly Summary</h2>
            <p>File status for each day of the week:</p>
            <div id="weekly-summary"></div>
        </section>
        
        <footer>
            <p>This tool works entirely in your browser. No data is uploaded to any server.</p>
            <p>All file information is reset at the end of each week.</p>
        </footer>
    </div>

    <div id="notification" class="notification"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const statusIndicator = document.getElementById('status-indicator');
            const statusMessage = document.getElementById('status-message');
            const comparisonResult = document.getElementById('comparison-result');
            const errorSection = document.getElementById('error-section');
            const errorContent = document.getElementById('error-content');
            const fileDifferences = document.getElementById('file-differences');
            const fileDiffList = document.getElementById('file-diff-list');
            const weekRange = document.getElementById('week-range');
            const weeklySummary = document.getElementById('weekly-summary');
            const notification = document.getElementById('notification');
            
            // Set week range
            const currentDate = new Date();
            const currentDay = currentDate.getDay(); // 0 = Sunday, 1 = Monday, etc.
            const startOfWeek = new Date(currentDate);
            startOfWeek.setDate(currentDate.getDate() - currentDay);
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(startOfWeek.getDate() + 6);
            
            weekRange.textContent = `${formatDate(startOfWeek)} to ${formatDate(endOfWeek)}`;
            
            // Sample file data for simulation
            const generateFileData = () => {
                const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
                const pcFiles = {};
                const serverFiles = {};
                
                // Generate files for each day of the week
                days.forEach((day, index) => {
                    const date = new Date(startOfWeek);
                    date.setDate(startOfWeek.getDate() + index);
                    
                    if (date > currentDate) return; // Don't generate future files
                    
                    const dateStr = formatDate(date);
                    
                    // PC files (up to 4 per day)
                    const pcCount = Math.floor(Math.random() * 5); // 0-4 files
                    pcFiles[day] = [];
                    
                    for (let i = 1; i <= pcCount; i++) {
                        pcFiles[day].push({
                            name: `report_${dateStr}_${i}.txt`,
                            content: `Daily Report - ${dateStr}\nFile: ${i}/${pcCount}\nSuccess: ${Math.floor(Math.random() * 5)}\nFailed: ${Math.floor(Math.random() * 2)}\nErrors: None`,
                            timestamp: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 8 + Math.floor(Math.random() * 8)) // Random time between 8am-4pm
                        });
                    }
                    
                    // Server files (may have more files, including failures)
                    const serverCount = pcCount + Math.floor(Math.random() * 3); // Same or more files
                    serverFiles[day] = [];
                    
                    for (let i = 1; i <= serverCount; i++) {
                        const hasError = Math.random() > 0.7; // 30% chance of error
                        const errorMsg = hasError ? `ERROR: Failed to process record ${i}` : 'None';
                        
                        serverFiles[day].push({
                            name: `report_${dateStr}_${i}.txt`,
                            content: `Daily Report - ${dateStr}\nFile: ${i}/${serverCount}\nSuccess: ${Math.floor(Math.random() * 5)}\nFailed: ${Math.floor(Math.random() * 3)}\nErrors: ${errorMsg}`,
                            timestamp: new Date(date.getFullYear(), date.getMonth(), date.getDate(), 8 + Math.floor(Math.random() * 10)) // Random time between 8am-6pm
                        });
                    }
                });
                
                return { pcFiles, serverFiles };
            };
            
            // Start comparison
            setTimeout(() => {
                compareWeeklyFiles();
            }, 1500);
            
            // Function to compare files for the week
            function compareWeeklyFiles() {
                statusIndicator.textContent = 'SCANNING';
                statusMessage.textContent = 'Comparing files for the current week...';
                
                const { pcFiles, serverFiles } = generateFileData();
                
                let missingFiles = 0;
                let differentFiles = 0;
                let errorMessages = [];
                
                // Compare files for each day
                Object.keys(pcFiles).forEach(day => {
                    const pcDayFiles = pcFiles[day];
                    const serverDayFiles = serverFiles[day] || [];
                    
                    // Check for files in PC but not in server
                    pcDayFiles.forEach(pcFile => {
                        const serverFile = serverDayFiles.find(f => f.name === pcFile.name);
                        
                        if (!serverFile) {
                            missingFiles++;
                            fileDiffList.innerHTML += `
                                <div class="file-item file-missing">
                                    <div>${pcFile.name} - Missing on server</div>
                                    <div>${formatTime(pcFile.timestamp)}</div>
                                </div>
                            `;
                        } else if (pcFile.content !== serverFile.content) {
                            differentFiles++;
                            fileDiffList.innerHTML += `
                                <div class="file-item">
                                    <div>${pcFile.name} - Content differs</div>
                                    <div>PC: ${formatTime(pcFile.timestamp)} | Server: ${formatTime(serverFile.timestamp)}</div>
                                </div>
                            `;
                            
                            // Check for error messages
                            const errors = extractErrorMessages(serverFile.content);
                            if (errors.length > 0) {
                                errorMessages.push(...errors.map(e => `${pcFile.name}: ${e}`));
                            }
                        }
                    });
                    
                    // Check for files in server but not in PC
                    serverDayFiles.forEach(serverFile => {
                        const pcFile = pcDayFiles.find(f => f.name === serverFile.name);
                        
                        if (!pcFile) {
                            fileDiffList.innerHTML += `
                                <div class="file-item file-new">
                                    <div>${serverFile.name} - Only on server</div>
                                    <div>${formatTime(serverFile.timestamp)}</div>
                                </div>
                            `;
                            
                            // Check for error messages
                            const errors = extractErrorMessages(serverFile.content);
                            if (errors.length > 0) {
                                errorMessages.push(...errors.map(e => `${serverFile.name}: ${e}`));
                            }
                        }
                    });
                });
                
                // Display results
                if (missingFiles === 0 && differentFiles === 0) {
                    comparisonResult.className = 'comparison-result match';
                    comparisonResult.innerHTML = `
                        <h3>All Files Match!</h3>
                        <p>All PC and server files are synchronized for this week.</p>
                    `;
                    showNotification('All files are synchronized!', 'success');
                } else {
                    comparisonResult.className = 'comparison-result diff';
                    comparisonResult.innerHTML = `
                        <h3>File Differences Found</h3>
                        <p>Found ${missingFiles} missing files and ${differentFiles} files with differences.</p>
                    `;
                    fileDifferences.style.display = 'block';
                    showNotification('File differences detected!', 'error');
                }
                
                // Display error messages if any
                if (errorMessages.length > 0) {
                    errorSection.style.display = 'block';
                    errorContent.innerHTML = errorMessages.map(msg => 
                        `<div class="error-message">${msg}</div>`
                    ).join('');
                }
                
                // Update status
                statusIndicator.textContent = 'COMPLETED';
                statusIndicator.className = 'status-indicator ' + 
                    (missingFiles === 0 && differentFiles === 0 ? 'status-active' : 'status-error');
                
                statusMessage.textContent = `Scan completed at ${new Date().toLocaleTimeString()}. 
                    Found ${missingFiles} missing files and ${differentFiles} files with differences.`;
                
                // Generate weekly summary
                generateWeeklySummary(pcFiles, serverFiles);
            }
            
            // Function to generate weekly summary
            function generateWeeklySummary(pcFiles, serverFiles) {
                const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
                let summaryHTML = '';
                
                days.forEach(day => {
                    if (day in pcFiles || day in serverFiles) {
                        const pcCount = pcFiles[day] ? pcFiles[day].length : 0;
                        const serverCount = serverFiles[day] ? serverFiles[day].length : 0;
                        
                        summaryHTML += `
                            <div class="history-item">
                                <strong>${day.charAt(0).toUpperCase() + day.slice(1)}</strong><br>
                                PC Files: ${pcCount} | Server Files: ${serverCount}
                            </div>
                        `;
                    }
                });
                
                weeklySummary.innerHTML = summaryHTML;
            }
            
            // Function to extract error messages
            function extractErrorMessages(text) {
                const errors = [];
                const lines = text.split('\n');
                
                for (const line of lines) {
                    if (line.toLowerCase().includes('error') || 
                        line.toLowerCase().includes('fail') ||
                        line.toLowerCase().includes('timeout') ||
                        line.toLowerCase().includes('invalid') ||
                        line.toLowerCase().includes('exception')) {
                        errors.push(line.trim());
                    }
                }
                
                return errors;
            }
            
            // Function to show notifications
            function showNotification(message, type) {
                notification.textContent = message;
                notification.className = 'notification';
                
                if (type === 'success') {
                    notification.classList.add('notification-success');
                } else if (type === 'error') {
                    notification.classList.add('notification-error');
                } else {
                    notification.classList.add('notification-warning');
                }
                
                notification.classList.add('show');
                
                // Hide after 5 seconds
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 5000);
            }
            
            // Helper function to format date
            function formatDate(date) {
                return date.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: '2-digit', 
                    day: '2-digit' 
                });
            }
            
            // Helper function to format time
            function formatTime(date) {
                return date.toLocaleTimeString('en-US', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            }
        });
    </script>
</body>
</html>
