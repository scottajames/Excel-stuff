<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live File Comparison Tool</title>
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: #333;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 20px;
            overflow: hidden;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid #eee;
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }
        
        .description {
            color: #7f8c8d;
            font-size: 1.1rem;
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
        }
        
        .config-section {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .config-box {
            flex: 1;
            min-width: 300px;
            padding: 20px;
            border: 2px solid #3498db;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .config-box h3 {
            margin-bottom: 15px;
            color: #3498db;
        }
        
        .form-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
        }
        
        input[type="text"], input[type="number"], select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background 0.3s ease;
            margin: 10px 5px;
        }
        
        .btn:hover {
            background: #2980b9;
        }
        
        .btn-start {
            background: #2ecc71;
        }
        
        .btn-start:hover {
            background: #27ae60;
        }
        
        .btn-stop {
            background: #e74c3c;
        }
        
        .btn-stop:hover {
            background: #c0392b;
        }
        
        .status-section {
            margin: 30px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .status-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .status-indicator {
            display: inline-block;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: 600;
        }
        
        .status-active {
            background: #2ecc71;
            color: white;
        }
        
        .status-inactive {
            background: #95a5a6;
            color: white;
        }
        
        .status-error {
            background: #e74c3c;
            color: white;
        }
        
        .results-section {
            margin-top: 30px;
        }
        
        .results-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .comparison-result {
            margin-bottom: 30px;
            padding: 20px;
            border-radius: 8px;
            background: #f8f9fa;
        }
        
        .match {
            border-left: 5px solid #2ecc71;
        }
        
        .diff {
            border-left: 5px solid #e74c3c;
        }
        
        .file-content {
            white-space: pre-wrap;
            background: white;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
            max-height: 300px;
            overflow-y: auto;
            margin-top: 15px;
        }
        
        .error-section {
            background: #ffeaa7;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            border-left: 5px solid #fdcb6e;
        }
        
        .history-section {
            margin-top: 40px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
        }
        
        .history-item {
            padding: 15px;
            margin: 10px 0;
            background: white;
            border-radius: 5px;
            border-left: 5px solid #3498db;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: 600;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            transform: translateX(100px);
            transition: all 0.3s ease;
        }
        
        .notification.show {
            opacity: 1;
            transform: translateX(0);
        }
        
        .notification-success {
            background: #2ecc71;
        }
        
        .notification-error {
            background: #e74c3c;
        }
        
        .notification-warning {
            background: #f39c12;
        }
        
        footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #7f8c8d;
        }
        
        @media (max-width: 768px) {
            .config-section {
                flex-direction: column;
            }
            
            .config-box {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Live File Comparison Tool</h1>
            <p class="description">
                This tool automatically monitors and compares files between your PC and the server at regular intervals.
                It detects differences and error messages without manual intervention.
            </p>
        </header>
        
        <section class="config-section">
            <div class="config-box">
                <h3>PC File Configuration</h3>
                <div class="form-group">
                    <label for="pc-file-path">PC File Path (simulated)</label>
                    <input type="text" id="pc-file-path" value="C:/DailyReports/report.txt">
                </div>
                <div class="form-group">
                    <label for="pc-check-interval">Check Interval (minutes)</label>
                    <input type="number" id="pc-check-interval" value="15" min="5">
                </div>
            </div>
            
            <div class="config-box">
                <h3>Server Configuration</h3>
                <div class="form-group">
                    <label for="server-url">Server URL (simulated)</label>
                    <input type="text" id="server-url" value="https://server.com/reports/daily.txt">
                </div>
                <div class="form-group">
                    <label for="server-check-interval">Check Interval (minutes)</label>
                    <input type="number" id="server-check-interval" value="30" min="5">
                </div>
            </div>
        </section>
        
        <div style="text-align: center;">
            <button id="start-btn" class="btn btn-start">Start Monitoring</button>
            <button id="stop-btn" class="btn btn-stop">Stop Monitoring</button>
        </div>
        
        <section class="status-section">
            <div class="status-header">
                <h2>Monitoring Status</h2>
                <span id="status-indicator" class="status-indicator status-inactive">INACTIVE</span>
            </div>
            <div id="status-message">Monitoring is not active. Click "Start Monitoring" to begin.</div>
        </section>
        
        <section class="results-section">
            <div class="results-header">
                <h2>Comparison Results</h2>
            </div>
            <div id="results-content">
                <div id="comparison-result" class="comparison-result">
                    <p>No comparisons have been made yet. Results will appear here once monitoring starts.</p>
                </div>
                
                <div class="file-display" style="display: none;">
                    <h3>File Contents</h3>
                    <div class="file-content" id="pc-content"></div>
                    <div class="file-content" id="server-content"></div>
                </div>
                
                <div id="error-section" class="error-section" style="display: none;">
                    <h3>Error Messages from Server File</h3>
                    <div id="error-content"></div>
                </div>
            </div>
        </section>
        
        <section class="history-section">
            <h2>Comparison History</h2>
            <p>Recent comparisons (stored for one week):</p>
            <div id="history-list"></div>
        </section>
        
        <footer>
            <p>This tool works entirely in your browser. No data is uploaded to any server.</p>
            <p>All comparison history is stored locally and will be cleared after one week.</p>
        </footer>
    </div>

    <div id="notification" class="notification"></div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startBtn = document.getElementById('start-btn');
            const stopBtn = document.getElementById('stop-btn');
            const statusIndicator = document.getElementById('status-indicator');
            const statusMessage = document.getElementById('status-message');
            const comparisonResult = document.getElementById('comparison-result');
            const pcContent = document.getElementById('pc-content');
            const serverContent = document.getElementById('server-content');
            const errorSection = document.getElementById('error-section');
            const errorContent = document.getElementById('error-content');
            const historyList = document.getElementById('history-list');
            const notification = document.getElementById('notification');
            
            let monitoringInterval = null;
            let pcCheckInterval = null;
            let serverCheckInterval = null;
            let isMonitoring = false;
            
            // Sample file contents for simulation
            const samplePCFiles = [
                "Daily Report - 2023-11-01\nSuccess: 4\nFailed: 0\nErrors: None",
                "Daily Report - 2023-11-02\nSuccess: 3\nFailed: 1\nErrors: None",
                "Daily Report - 2023-11-03\nSuccess: 4\nFailed: 0\nErrors: None",
                "Daily Report - 2023-11-04\nSuccess: 2\nFailed: 2\nErrors: None"
            ];
            
            const sampleServerFiles = [
                "Daily Report - 2023-11-01\nSuccess: 4\nFailed: 0\nErrors: None",
                "Daily Report - 2023-11-02\nSuccess: 3\nFailed: 1\nErrors: Connection timeout on record #4",
                "Daily Report - 2023-11-03\nSuccess: 4\nFailed: 0\nErrors: None\nAdditional: Server maintenance completed",
                "Daily Report - 2023-11-04\nSuccess: 2\nFailed: 2\nErrors: Invalid format on record #3, Database error on record #4"
            ];
            
            // Load history from localStorage
            loadHistory();
            
            // Start monitoring
            startBtn.addEventListener('click', function() {
                if (isMonitoring) return;
                
                const pcInterval = document.getElementById('pc-check-interval').value * 60000;
                const serverInterval = document.getElementById('server-check-interval').value * 60000;
                
                // Update status
                statusIndicator.className = 'status-indicator status-active';
                statusIndicator.textContent = 'ACTIVE';
                statusMessage.textContent = 'Monitoring active. Next check in ' + (pcInterval/60000) + ' minutes.';
                
                isMonitoring = true;
                showNotification('Monitoring started successfully', 'success');
                
                // Perform initial check
                checkFiles();
                
                // Set up interval checks
                pcCheckInterval = setInterval(checkFiles, pcInterval);
                serverCheckInterval = setInterval(checkFiles, serverInterval);
            });
            
            // Stop monitoring
            stopBtn.addEventListener('click', function() {
                if (!isMonitoring) return;
                
                clearInterval(pcCheckInterval);
                clearInterval(serverCheckInterval);
                
                // Update status
                statusIndicator.className = 'status-indicator status-inactive';
                statusIndicator.textContent = 'INACTIVE';
                statusMessage.textContent = 'Monitoring is not active. Click "Start Monitoring" to begin.';
                
                isMonitoring = false;
                showNotification('Monitoring stopped', 'warning');
            });
            
            // Function to check files
            function checkFiles() {
                // Simulate file retrieval - in a real scenario, you would fetch actual files
                const randomPCIndex = Math.floor(Math.random() * samplePCFiles.length);
                const randomServerIndex = Math.floor(Math.random() * sampleServerFiles.length);
                
                const pcText = samplePCFiles[randomPCIndex];
                const serverText = sampleServerFiles[randomServerIndex];
                
                // Compare files
                compareFiles(pcText, serverText);
                
                // Update status message
                const nextCheck = document.getElementById('pc-check-interval').value;
                statusMessage.textContent = `Last checked: ${new Date().toLocaleTimeString()}. Next check in ${nextCheck} minutes.`;
            }
            
            // Function to compare files
            function compareFiles(pcText, serverText) {
                const isMatch = pcText === serverText;
                
                if (isMatch) {
                    comparisonResult.className = 'comparison-result match';
                    comparisonResult.innerHTML = `
                        <h3>Files Match!</h3>
                        <p>The files are identical as of ${new Date().toLocaleTimeString()}.</p>
                    `;
                } else {
                    comparisonResult.className = 'comparison-result diff';
                    comparisonResult.innerHTML = `
                        <h3>Files Don't Match</h3>
                        <p>Differences detected at ${new Date().toLocaleTimeString()}.</p>
                    `;
                    
                    // Show notification if files don't match
                    showNotification('Files do not match!', 'error');
                }
                
                // Display file contents
                document.querySelector('.file-display').style.display = 'block';
                pcContent.textContent = pcText;
                serverContent.textContent = serverText;
                
                // Check for error messages in server file
                const errorMessages = extractErrorMessages(serverText);
                if (errorMessages.length > 0) {
                    errorSection.style.display = 'block';
                    errorContent.innerHTML = errorMessages.map(msg => 
                        `<div class="error-message">${msg}</div>`
                    ).join('');
                } else {
                    errorSection.style.display = 'none';
                }
                
                // Save to history
                saveToHistory({
                    date: new Date().toISOString(),
                    match: isMatch,
                    errorCount: errorMessages.length
                });
                
                // Reload history
                loadHistory();
            }
            
            // Function to extract error messages
            function extractErrorMessages(text) {
                const errors = [];
                const lines = text.split('\n');
                
                for (const line of lines) {
                    if (line.toLowerCase().includes('error') || 
                        line.toLowerCase().includes('fail') ||
                        line.toLowerCase().includes('timeout') ||
                        line.toLowerCase().includes('invalid') ||
                        line.toLowerCase().includes('exception')) {
                        errors.push(line);
                    }
                    
                    // Limit to 10 most relevant error lines
                    if (errors.length >= 10) break;
                }
                
                return errors;
            }
            
            // Function to save comparison to history
            function saveToHistory(comparison) {
                let history = JSON.parse(localStorage.getItem('fileComparisonHistory') || '[]');
                
                // Add new comparison
                history.push(comparison);
                
                // Keep only last week's data
                const oneWeekAgo = new Date();
                oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
                
                history = history.filter(item => new Date(item.date) > oneWeekAgo);
                
                // Save back to localStorage
                localStorage.setItem('fileComparisonHistory', JSON.stringify(history));
            }
            
            // Function to load history from localStorage
            function loadHistory() {
                const history = JSON.parse(localStorage.getItem('fileComparisonHistory') || '[]');
                
                if (history.length === 0) {
                    historyList.innerHTML = '<p>No comparison history yet.</p>';
                    return;
                }
                
                // Show latest first
                history.sort((a, b) => new Date(b.date) - new Date(a.date));
                
                historyList.innerHTML = history.map(item => `
                    <div class="history-item">
                        <strong>${new Date(item.date).toLocaleString()}</strong><br>
                        Status: ${item.match ? 'Match' : 'Different'} | 
                        Errors: ${item.errorCount}
                    </div>
                `).join('');
            }
            
            // Function to show notifications
            function showNotification(message, type) {
                notification.textContent = message;
                notification.className = 'notification';
                
                if (type === 'success') {
                    notification.classList.add('notification-success');
                } else if (type === 'error') {
                    notification.classList.add('notification-error');
                } else {
                    notification.classList.add('notification-warning');
                }
                
                notification.classList.add('show');
                
                // Hide after 5 seconds
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 5000);
            }
            
            // Simulate initial state
            statusIndicator.className = 'status-indicator status-inactive';
            statusIndicator.textContent = 'INACTIVE';
        });
    </script>
</body>
</html>
