<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tray Hierarchy Visualizer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            padding-bottom: 50px;
        }

        #visualization {
            min-height: 500px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            padding: 20px;
            background-color: white;
        }

        .node {
            padding: 8px 12px;
            border-radius: 4px;
            margin: 2px 0;
            display: block;
            font-weight: 500;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            cursor: pointer;
            transition: all 0.2s;
            position: relative;
        }

        .node:hover {
            transform: translateX(2px);
            box-shadow: 0 2px 5px rgba(0,0,0,0.15);
        }

        .constable {
            background-color: #4e79a7;
            color: white;
            border-left: 4px solid #3a5f8a;
        }

        .sergeant {
            background-color: #4e79a7;
            color: white;
            border-left: 4px solid #da7c1a;
        }

        .inspector {
            background-color: #4e79a7;
            color: white;
            border-left: 4px solid #c94547;
        }

        .other {
            background-color: #4e79a7;
            color: white;
            border-left: 4px solid #5fa09b;
        }

        .unused {
            background-color: #bab0ac;
            color: white;
            border-left: 4px solid #9c8f8a;
        }

        .children {
            margin-left: 25px;
            border-left: 2px solid #ddd;
            padding-left: 5px;
        }

        .legend-item {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }

        .legend-color {
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border-radius: 3px;
        }

        .error-message {
            color: #dc3545;
            font-weight: bold;
        }

        .debug-info {
            font-family: monospace;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-top: 20px;
            font-size: 0.9em;
            max-height: 200px;
            overflow-y: auto;
        }

        .node-count {
            font-size: 0.8em;
            opacity: 0.7;
            margin-left: 5px;
        }

        .search-container {
            margin-bottom: 20px;
        }

        .stats {
            margin-top: 10px;
            font-size: 0.9em;
            color: #666;
        }

        .expand-collapse {
            font-size: 0.8em;
            margin-left: 10px;
            cursor: pointer;
            color: rgba(255,255,255,0.7);
        }

        .node-header {
            display: flex;
            align-items: center;
        }

        .toggle-children {
            margin-right: 5px;
            width: 15px;
            text-align: center;
            cursor: pointer;
        }

        .section-title {
            font-weight: bold;
            margin: 15px 0 5px 0;
            color: #333;
        }

        .unused-container {
            margin-top: 30px;
            padding-top: 15px;
            border-top: 2px solid #eee;
        }

        .collapsed > .children {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Tray Hierarchy Visualizer</h1>
        
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Upload Excel File</h5>
                <input type="file" id="excelFile" class="form-control" accept=".xlsx, .xls">
                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" id="debugCheck">
                    <label class="form-check-label" for="debugCheck">
                        Show debug information
                    </label>
                </div>
                <button id="processBtn" class="btn btn-primary mt-3">Process File</button>
                <div id="fileStats" class="stats"></div>
            </div>
        </div>
        
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Tray Visualization</h5>
                <div class="search-container">
                    <button id="expandAll" class="btn btn-sm btn-outline-secondary mt-2">Expand All</button>
                    <button id="collapseAll" class="btn btn-sm btn-outline-secondary mt-2">Collapse All</button>
                </div>
                <div id="visualization" class="mt-3">
                    <p>Upload an Excel file to see the tray hierarchy visualization.</p>
                </div>
                <div id="debugOutput" class="debug-info" style="display: none;"></div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Legend</h5>
                <div class="legend-item"><span class="legend-color constable"></span> Constable (No suffix)</div>
                <div class="legend-item"><span class="legend-color sergeant"></span> Sergeant (DS/Sgt/PS suffix)</div>
                <div class="legend-item"><span class="legend-color inspector"></span> Inspector (DI/Insp suffix)</div>
                <div class="legend-item"><span class="legend-color unused"></span> Unused Trays</div>
                <div class="legend-item"><span class="legend-color other"></span> Other Ranks</div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        // Global variables
        let allNodes = {};
        let allLinks = [];
        let currentHierarchy = [];
        let unusedTrays = [];
        let trayUserCountMap = {};

        document.getElementById('processBtn').addEventListener('click', processExcelFile);
        document.getElementById('debugCheck').addEventListener('change', function() {
            document.getElementById('debugOutput').style.display = this.checked ? 'block' : 'none';
        });
        document.getElementById('expandAll').addEventListener('click', function() {
            document.querySelectorAll('.node').forEach(node => {
                node.classList.remove('collapsed');
                const toggle = node.querySelector('.toggle-children');
                if (toggle) toggle.textContent = '▼';
            });
        });
        document.getElementById('collapseAll').addEventListener('click', function() {
            document.querySelectorAll('.node').forEach(node => {
                if (node.querySelector('.children')) {
                    node.classList.add('collapsed');
                    const toggle = node.querySelector('.toggle-children');
                    if (toggle) toggle.textContent = '▶';
                }
            });
        });

        function processExcelFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            const debugOutput = document.getElementById('debugOutput');
            debugOutput.innerHTML = '';
            
            if (!file) {
                showError('Please select an Excel file first.');
                return;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // Debug: Show sheet names
                    debugOutput.innerHTML += `<p>Sheets found: ${workbook.SheetNames.join(', ')}</p>`;
                    
                    // Try to find Sheet1 and Sheet2
                    const sheetNames = workbook.SheetNames.map(name => name.toLowerCase());
                    const sheet1Index = sheetNames.findIndex(name => name.includes('sheet1') || name.includes('sheet 1'));
                    const sheet2Index = sheetNames.findIndex(name => name.includes('sheet2') || name.includes('sheet 2'));
                    
                    if (sheet1Index === -1 || sheet2Index === -1) {
                        showError('Could not find both Sheet1 and Sheet2 in the Excel file.');
                        return;
                    }
                    
                    const sheet1 = workbook.Sheets[workbook.SheetNames[sheet1Index]];
                    const sheet2 = workbook.Sheets[workbook.SheetNames[sheet2Index]];
                    
                    const sheet1Json = XLSX.utils.sheet_to_json(sheet1);
                    const sheet2Json = XLSX.utils.sheet_to_json(sheet2);
                    
                    debugOutput.innerHTML += `<p>Sheet1 first row: ${JSON.stringify(sheet1Json[0])}</p>`;
                    debugOutput.innerHTML += `<p>Sheet2 first row: ${JSON.stringify(sheet2Json[0])}</p>`;

                    // Count users per tray from Sheet1
                    trayUserCountMap = buildTrayUserCount(sheet1Json);

                    // Process all trays from Sheet2
                    const allTraysFromSheet2 = new Set();
                    const columnAKey = Object.keys(sheet2Json[0] || {})[0] || 'A';
                    sheet2Json.forEach(row => {
                        const tray = row[columnAKey];
                        if (tray !== undefined && tray !== null) {
                            const trayStr = String(tray).trim();
                            // Skip trays with PMPOT, -SEC, or **EXPIRED**
                            if (!trayStr.includes('PMPOT') && !trayStr.includes('-SEC') && !trayStr.includes('**EXPIRED**')) {
                                allTraysFromSheet2.add(trayStr);
                            }
                        }
                    });
                    
                    // Create hierarchy data
                    const hierarchyData = createHierarchyFromSheet1(sheet1Json, allTraysFromSheet2);
                    
                    // Create rank map from Sheet2
                    const rankMap = createRankMapFromSheet2(sheet2Json);

                    // Apply ranks & user counts
                    applyRanksAndUserCounts(hierarchyData, rankMap, trayUserCountMap);

                    // Sum total user counts
                    hierarchyData.forEach(root => sumUserCounts(root));

                    currentHierarchy = hierarchyData;

                    // Update stats
                    document.getElementById('fileStats').innerHTML = `
                        <div>Total trays: ${allTraysFromSheet2.size}</div>
                        <div>Linked trays: ${Object.keys(allNodes).length}</div>
                        <div>Unused trays: ${unusedTrays.length}</div>
                        <div>Relationships: ${allLinks.length}</div>
                        <div>Root nodes: ${hierarchyData.length}</div>
                    `;
                    
                    visualizeHierarchy(hierarchyData);
                    
                } catch (error) {
                    showError('Error processing Excel file: ' + error.message);
                    debugOutput.innerHTML += `<p class="error-message">Error: ${error.stack}</p>`;
                }
            };
            
            reader.onerror = function() {
                showError('Error reading the file.');
            };
            
            reader.readAsArrayBuffer(file);
        }

        function showError(message) {
            const container = document.getElementById('visualization');
            container.innerHTML = `<p class="error-message">${message}</p>`;
        }

        function buildTrayUserCount(sheet1Data) {
            const countMap = {};
            const trayHeader = findHeader(sheet1Data[0], "Worktray - DB Value");
            sheet1Data.forEach(row => {
                const tray = row[trayHeader];
                if (tray) {
                    const trayStr = String(tray).trim();
                    // Skip trays with PMPOT, -SEC, or **EXPIRED**
                    if (!trayStr.includes('PMPOT') && !trayStr.includes('-SEC') && !trayStr.includes('**EXPIRED**')) {
                        countMap[trayStr] = (countMap[trayStr] || 0) + 1;
                    }
                }
            });
            return countMap;
        }

        function createHierarchyFromSheet1(sheet1Data, allTraysFromSheet2) {
            allNodes = {};
            allLinks = [];
            unusedTrays = [];
            const uniqueLinks = new Set();
            
            const childHeader = findHeader(sheet1Data[0], "Worktray - DB Value");
            const parentHeader = findHeader(sheet1Data[0], "Parent - DB Value");
            
            if (!childHeader || !parentHeader) {
                return [];
            }
            
            sheet1Data.forEach(row => {
                const child = row[childHeader];
                const parent = row[parentHeader];
                
                if (child) {
                    const childStr = String(child).trim();
                    // Skip trays with PMPOT, -SEC, or **EXPIRED**
                    if (!childStr.includes('PMPOT') && !childStr.includes('-SEC') && !childStr.includes('**EXPIRED**')) {
                        if (!allNodes[childStr]) {
                            allNodes[childStr] = { id: childStr, rank: 'constable', isUsed: true };
                        }
                    }
                }
                
                if (parent) {
                    const parentStr = String(parent).trim();
                    // Skip trays with PMPOT, -SEC, or **EXPIRED**
                    if (!parentStr.includes('PMPOT') && !parentStr.includes('-SEC') && !parentStr.includes('**EXPIRED**')) {
                        if (!allNodes[parentStr]) {
                            allNodes[parentStr] = { id: parentStr, rank: 'constable', isUsed: true };
                        }
                    }
                }
            });
            
            sheet1Data.forEach(row => {
                const child = row[childHeader];
                const parent = row[parentHeader];
                if (child && parent) {
                    const childStr = String(child).trim();
                    const parentStr = String(parent).trim();
                    // Skip trays with PMPOT, -SEC, or **EXPIRED**
                    if (!childStr.includes('PMPOT') && !childStr.includes('-SEC') && !childStr.includes('**EXPIRED**') &&
                        !parentStr.includes('PMPOT') && !parentStr.includes('-SEC') && !parentStr.includes('**EXPIRED**')) {
                        const linkKey = `${parentStr}->${childStr}`;
                        if (!uniqueLinks.has(linkKey)) {
                            uniqueLinks.add(linkKey);
                            allLinks.push({ source: parentStr, target: childStr });
                        }
                    }
                }
            });
            
            allTraysFromSheet2.forEach(tray => {
                if (!allNodes[tray]) {
                    unusedTrays.push({ id: tray, rank: 'unused', isUsed: false, userCount: 0, totalUserCount: 0 });
                }
            });
            
            const rootNodes = Object.keys(allNodes).filter(id => !allLinks.some(link => link.target === id));
            
            const seenNodes = new Set();
            function buildHierarchy(id) {
                if (seenNodes.has(id)) return null;
                seenNodes.add(id);
                const node = allNodes[id];
                const childrenLinks = allLinks.filter(link => link.source === id);
                childrenLinks.sort((a, b) => a.target.localeCompare(b.target));
                const children = [];
                childrenLinks.forEach(link => {
                    const childNode = buildHierarchy(link.target);
                    if (childNode) children.push(childNode);
                });
                return { ...node, children: children.length ? children : null, userCount: 0, totalUserCount: 0 };
            }
            rootNodes.sort((a, b) => a.localeCompare(b));
            return rootNodes.map(root => buildHierarchy(root)).filter(Boolean);
        }

        function createRankMapFromSheet2(sheet2Data) {
            const rankMap = {};
            const columnAKey = Object.keys(sheet2Data[0] || {})[0] || 'A';
            sheet2Data.forEach(row => {
                const key = row[columnAKey];
                if (!key) return;
                const keyStr = String(key).trim();
                // Skip trays with PMPOT, -SEC, or **EXPIRED**
                if (!keyStr.includes('PMPOT') && !keyStr.includes('-SEC') && !keyStr.includes('**EXPIRED**')) {
                    if (/(DS|Sgt|PS)/i.test(keyStr)) {
                        rankMap[keyStr] = 'sergeant';
                    } else if (/(DI|Insp)/i.test(keyStr)) {
                        rankMap[keyStr] = 'inspector';
                    } else {
                        rankMap[keyStr] = 'constable';
                    }
                }
            });
            return rankMap;
        }

        function applyRanksAndUserCounts(hierarchyData, rankMap, userCountMap) {
            function apply(node) {
                if (rankMap[node.id]) node.rank = rankMap[node.id];
                node.userCount = userCountMap[node.id] || 0;
                if (node.children) node.children.forEach(child => apply(child));
            }
            hierarchyData.forEach(root => apply(root));
        }

        function sumUserCounts(node) {
            let total = node.userCount || 0;
            if (node.children && node.children.length > 0) {
                node.children.forEach(child => {
                    total += sumUserCounts(child);
                });
            }
            node.totalUserCount = total;
            return total;
        }

        function findHeader(row, headerName) {
            if (!row) return null;
            const lowerHeader = headerName.toLowerCase();
            return Object.keys(row).find(key => key.toLowerCase().includes(lowerHeader));
        }

        function visualizeHierarchy(data) {
            const container = document.getElementById('visualization');
            container.innerHTML = '';
            if (data.length === 0 && unusedTrays.length === 0) {
                container.innerHTML = '<p class="error-message">No tray data found.</p>';
                return;
            }
            function createNodeElement(item) {
                const node = document.createElement('div');
                const rankClass = item.rank || 'other';
                node.className = `node ${rankClass}`;
                const nodeHeader = document.createElement('div');
                nodeHeader.className = 'node-header';
                if (item.children) {
                    const toggle = document.createElement('span');
                    toggle.className = 'toggle-children';
                    toggle.textContent = '▶';
                    nodeHeader.appendChild(toggle);
                } else {
                    const spacer = document.createElement('span');
                    spacer.className = 'toggle-children';
                    spacer.style.visibility = 'hidden';
                    spacer.textContent = '▶';
                    nodeHeader.appendChild(spacer);
                }
                const nameSpan = document.createElement('span');
                nameSpan.textContent = `${item.id} (${item.userCount} Users)`;
                nodeHeader.appendChild(nameSpan);
                node.appendChild(nodeHeader);
                if (item.children) {
                    const childrenContainer = document.createElement('div');
                    childrenContainer.className = 'children';
                    item.children.sort((a, b) => a.id.localeCompare(b.id));
                    item.children.forEach(child => {
                        childrenContainer.appendChild(createNodeElement(child));
                    });
                    node.appendChild(childrenContainer);
                    node.classList.add('collapsed');
                }
                node.addEventListener('click', function(e) {
                    if (e.target.classList.contains('toggle-children')) {
                        node.classList.toggle('collapsed');
                        e.target.textContent = node.classList.contains('collapsed') ? '▶' : '▼';
                        e.stopPropagation();
                    } else if (e.target === nodeHeader || e.target === nameSpan) {
                        node.classList.toggle('collapsed');
                        const toggle = node.querySelector('.toggle-children');
                        if (toggle) toggle.textContent = node.classList.contains('collapsed') ? '▶' : '▼';
                    }
                });
                return node;
            }
            if (data.length > 0) {
                const linkedTitle = document.createElement('div');
                linkedTitle.className = 'section-title';
                linkedTitle.textContent = 'Linked Trays (Hierarchy)';
                container.appendChild(linkedTitle);
                data.forEach(root => {
                    container.appendChild(createNodeElement(root));
                });
            }
            if (unusedTrays.length > 0) {
                const unusedTitle = document.createElement('div');
                unusedTitle.className = 'section-title';
                unusedTitle.textContent = 'Unused Trays';
                container.appendChild(unusedTitle);
                const unusedContainer = document.createElement('div');
                unusedContainer.className = 'unused-container';
                unusedTrays.sort((a, b) => a.id.localeCompare(b.id));
                unusedTrays.forEach(tray => {
                    unusedContainer.appendChild(createNodeElement(tray));
                });
                container.appendChild(unusedContainer);
            }
        }
    </script>
</body>
</html>
