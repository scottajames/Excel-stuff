<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>React Explained Simply</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      background: #f5f5f5;
      color: #333;
    }
    h1, h2 {
      color: #2c3e50;
    }
    .container {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      margin-bottom: 20px;
    }
    button {
      background: #3498db;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      margin: 5px;
      transition: background 0.2s;
    }
    button:hover {
      background: #2980b9;
    }
    .demo-area {
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 4px;
      margin: 10px 0;
      background: #fafafa;
    }
    .component {
      background: #e8f4fc;
      padding: 10px;
      margin: 10px 0;
      border-left: 4px solid #3498db;
    }
    .task {
      background: #e8f8f5;
      padding: 8px;
      margin: 5px 0;
      border-left: 4px solid #2ecc71;
    }
    .error {
      color: #e74c3c;
      background: #fdedec;
      padding: 10px;
      border-radius: 4px;
    }
    .portal {
      background: #fef9e7;
      padding: 10px;
      border: 1px dashed #f39c12;
    }
  </style>
</head>
<body>
  <h1>React Explained Like I'm 5</h1>
  
  <!-- 1. React Core -->
  <div class="container">
    <h2>1. React Core (The LEGO Factory)</h2>
    <p>Turns JSX into elements and manages components</p>
    
    <div class="demo-area">
      <div class="component" id="demo-component">
        <h3>Counter Component</h3>
        <p>Count: <span id="counter-value">0</span></p>
        <button onclick="incrementCounter()">Increment</button>
      </div>
    </div>
  </div>

  <!-- 2. Scheduler -->
  <div class="container">
    <h2>2. Scheduler (The Mom Prioritizing Chores)</h2>
    <p>Decides which tasks to do first</p>
    
    <div class="demo-area">
      <button onclick="addTask('ASAP')">Add ASAP Task (Priority 1)</button>
      <button onclick="addTask('Normal')">Add Normal Task (Priority 3)</button>
      <button onclick="addTask('Low')">Add Low Priority Task (Priority 5)</button>
      
      <div id="task-queue">
        <h4>Task Queue:</h4>
        <!-- Tasks will appear here -->
      </div>
    </div>
  </div>

  <!-- 3. React DOM -->
  <div class="container">
    <h2>3. React DOM (The Construction Worker)</h2>
    <p>Puts React stuff into the real webpage</p>
    
    <div class="demo-area">
      <button onclick="createDemoPortal()">Create a Portal</button>
      <div id="portal-target" class="portal">
        <p>Portal content will appear here!</p>
      </div>
    </div>
  </div>

  <!-- 4. Error Handling -->
  <div class="container">
    <h2>4. Error Messages (The Angry Teacher)</h2>
    <p>Yells when you do something wrong</p>
    
    <div class="demo-area">
      <button onclick="triggerError(299)">Trigger Portal Error</button>
      <button onclick="triggerError(522)">Trigger Deprecated Error</button>
      <div id="error-display" class="error" style="display: none;"></div>
    </div>
  </div>

  <!-- 5. Hooks -->
  <div class="container">
    <h2>5. Hooks (Magic Spells)</h2>
    <p>Special powers for function components</p>
    
    <div class="demo-area">
      <div id="hooks-demo">
        <p>State value: <span id="state-value">0</span></p>
        <button onclick="incrementState()">Use State Hook</button>
      </div>
    </div>
  </div>

<script>
  // ==========================================
  // 1. REACT CORE (Simplified)
  // ==========================================
  let counter = 0;
  
  function incrementCounter() {
    counter++;
    document.getElementById('counter-value').textContent = counter;
    console.log('Updated counter:', counter);
  }

  // ==========================================
  // 2. SCHEDULER (Simplified)
  // ==========================================
  const taskQueue = [];
  
  function addTask(priority) {
    const priorities = {
      'ASAP': { level: 1, color: '#e74c3c' },
      'Normal': { level: 3, color: '#3498db' },
      'Low': { level: 5, color: '#2ecc71' }
    };
    
    const task = {
      id: Date.now(),
      name: `${priority} Priority Task`,
      priority: priorities[priority]
    };
    
    taskQueue.push(task);
    renderTaskQueue();
    
    console.log(`Added task: ${task.name} at priority ${task.priority.level}`);
  }
  
  function renderTaskQueue() {
    const queueElement = document.getElementById('task-queue');
    queueElement.innerHTML = '<h4>Task Queue:</h4>';
    
    // Sort by priority (lower number = higher priority)
    taskQueue.sort((a, b) => a.priority.level - b.priority.level);
    
    taskQueue.forEach(task => {
      const taskElement = document.createElement('div');
      taskElement.className = 'task';
      taskElement.style.borderLeftColor = task.priority.color;
      taskElement.innerHTML = `
        <strong>${task.name}</strong> 
        (Priority: ${task.priority.level})
        <button onclick="removeTask(${task.id})">Complete</button>
      `;
      queueElement.appendChild(taskElement);
    });
  }
  
  function removeTask(id) {
    const index = taskQueue.findIndex(task => task.id === id);
    if (index !== -1) {
      taskQueue.splice(index, 1);
      renderTaskQueue();
    }
  }

  // ==========================================
  // 3. REACT DOM (Simplified)
  // ==========================================
  function createDemoPortal() {
    const portalTarget = document.getElementById('portal-target');
    portalTarget.innerHTML = `
      <h3>Portal Content</h3>
      <p>This was rendered somewhere else in the DOM!</p>
      <p>Like a wormhole for UI elements ðŸš€</p>
    `;
    console.log('Created a portal to #portal-target');
  }

  // ==========================================
  // 4. ERROR HANDLING (Simplified)
  // ==========================================
  const errorMessages = {
    299: "Can't create a portal here! Target must be a real DOM element.",
    522: "Stop using this! It's been removed from React."
  };
  
  function triggerError(code) {
    const errorElement = document.getElementById('error-display');
    errorElement.style.display = 'block';
    errorElement.textContent = `ERROR #${code}: ${errorMessages[code]}`;
    console.error(`React error triggered: ${errorMessages[code]}`);
  }

  // ==========================================
  // 5. HOOKS (Simplified)
  // ==========================================
  let hooksState = 0;
  
  function incrementState() {
    hooksState++;
    document.getElementById('state-value').textContent = hooksState;
    console.log('State updated to:', hooksState);
    
    // Simulate useEffect
    if (hooksState === 3) {
      console.log('Effect triggered! (Like useEffect)');
    }
  }
</script>
</body>
</html>
