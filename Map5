Sub MasterImportAndValidation()
    Dim wsMapping As Worksheet, wsOutput As Worksheet, wsSummary As Worksheet
    Dim lastRow As Long, i As Long, duRow As Long, hrRow As Long, col As Integer
    Dim needsDefault As Boolean, found As Boolean
    Dim orgLevel As String, unitToCheck As String
    Dim securityRoles As String, rank As String
    Dim defaultUnitQuery As ListObject, hrFeedQuery As ListObject
    Dim defaultUnitArray As Variant, hrFeedArray As Variant
    
    ' Set worksheets with error handling
    On Error Resume Next
    Set wsMapping = ThisWorkbook.Sheets("MAPPING")
    Set wsOutput = ThisWorkbook.Sheets("OUTPUT")
    Set wsSummary = ThisWorkbook.Sheets("SUMMARY")
    On Error GoTo 0
    
    If wsMapping Is Nothing Or wsOutput Is Nothing Or wsSummary Is Nothing Then
        MsgBox "Required sheets not found! Please check sheet names.", vbCritical
        Exit Sub
    End If
    
    ' Get queries from "Mapping [2]" group
    Set defaultUnitQuery = GetQueryFromGroup("DEFAULTUNIT_CHECK", "Mapping [2]")
    Set hrFeedQuery = GetQueryFromGroup("HR_Feed", "Mapping [2]")
    
    If defaultUnitQuery Is Nothing Or hrFeedQuery Is Nothing Then
        MsgBox "Required queries not found in 'Mapping [2]' group!", vbCritical
        Exit Sub
    End If
    
    ' Load query data into arrays for faster processing
    defaultUnitArray = defaultUnitQuery.DataBodyRange.Value
    hrFeedArray = hrFeedQuery.DataBodyRange.Value
    
    Application.ScreenUpdating = False
    
    ' ===== STEP 1: IMPORT FROM OUTPUT TO MAPPING =====
    lastRow = wsOutput.Cells(wsOutput.Rows.Count, "A").End(xlUp).Row
    If lastRow < 2 Then lastRow = 2
    
    ' Clear target columns in MAPPING
    wsMapping.Range("A2:K" & lastRow).ClearContents
    
    ' Process import from OUTPUT to MAPPING
    For i = 2 To lastRow
        needsDefault = False
        
        ' Column D in MAPPING: From Column P in OUTPUT
        If Not IsEmpty(wsOutput.Cells(i, 16)) Then
            wsMapping.Cells(i, 4).Value = wsOutput.Cells(i, 16).Value
            needsDefault = True
        End If
        
        ' Column E in MAPPING: From Column J in OUTPUT
        If Not IsEmpty(wsOutput.Cells(i, 10)) Then
            wsMapping.Cells(i, 5).Value = wsOutput.Cells(i, 10).Value
            needsDefault = True
        End If
        
        ' Column J in MAPPING: From Columns I,H,G,F,E in OUTPUT (first non-empty)
        For col = 9 To 5 Step -1
            If Not IsEmpty(wsOutput.Cells(i, col)) Then
                wsMapping.Cells(i, 10).Value = wsOutput.Cells(i, col).Value
                needsDefault = True
                Exit For
            End If
        Next col
        
        ' Set default values if any data was imported
        If needsDefault Then
            wsMapping.Cells(i, 1).Value = "XXC_MPS_CONNECT_DEFAULTUNIT"
            wsMapping.Cells(i, 9).Value = "XXC_CONNECT_ORG_AND_GRADE"
        End If
    Next i
    
    ' ===== STEP 2: IMPORT FROM SUMMARY TO MAPPING =====
    lastRow = wsSummary.Cells(wsSummary.Rows.Count, "A").End(xlUp).Row
    If lastRow < 2 Then lastRow = 2
    
    ' Process import from SUMMARY to MAPPING (additional data)
    For i = 2 To lastRow
        ' Add your specific import logic from SUMMARY sheet here
        ' Example: wsMapping.Cells(i, "F").Value = wsSummary.Cells(i, "C").Value
    Next i
    
    ' ===== STEP 3: VALIDATE AND ENRICH DATA =====
    lastRow = wsMapping.Cells(wsMapping.Rows.Count, "J").End(xlUp).Row
    
    For i = 2 To lastRow
        securityRoles = ""
        rank = ""
        unitToCheck = Trim(wsMapping.Cells(i, "J").Value)
        
        If unitToCheck <> "" Then
            ' Search DEFAULTUNIT_CHECK (column J â†’ K)
            For duRow = LBound(defaultUnitArray, 1) To UBound(defaultUnitArray, 1)
                If Trim(CStr(defaultUnitArray(duRow, 10))) = unitToCheck Then ' Column J
                    orgLevel = Trim(CStr(defaultUnitArray(duRow, 11))) ' Column K
                    
                    ' Search HR_Feed for orgLevel (columns H-Q)
                    For hrRow = LBound(hrFeedArray, 1) To UBound(hrFeedArray, 1)
                        For col = 8 To 17 ' Columns H-Q
                            If Trim(CStr(hrFeedArray(hrRow, col))) = orgLevel Then
                                ' Get Security Roles from AG (column 33)
                                If Not IsEmpty(hrFeedArray(hrRow, 33)) Then
                                    securityRoles = AddToList(securityRoles, CStr(hrFeedArray(hrRow, 33)))
                                End If
                                ' Get Rank from C (column 3)
                                If rank = "" And Not IsEmpty(hrFeedArray(hrRow, 3)) Then
                                    rank = CStr(hrFeedArray(hrRow, 3))
                                End If
                                Exit For
                            End If
                        Next col
                    Next hrRow
                    
                    ' Update MAPPING sheet
                    wsMapping.Cells(i, "K").Value = securityRoles ' Security roles to column K
                    wsMapping.Cells(i, "I").Value = rank ' Rank to column I
                    Exit For
                End If
            Next duRow
        End If
    Next i
    
    Application.ScreenUpdating = True
    MsgBox "All data imported and validated successfully!" & vbCrLf & _
           "Processed " & lastRow - 1 & " rows in MAPPING.", vbInformation
End Sub

Function GetQueryFromGroup(queryName As String, groupName As String) As ListObject
    Dim conn As WorkbookConnection
    Dim ws As Worksheet
    
    ' Try all possible connection name formats
    For Each conn In ThisWorkbook.Connections
        If conn.Name = groupName & "\" & queryName Or _
           conn.Name = groupName & "!" & queryName Or _
           conn.Name = queryName Then
            On Error Resume Next
            Set ws = ThisWorkbook.Sheets(conn.WorksheetConnection.Parent.Name)
            Set GetQueryFromGroup = ws.ListObjects(queryName)
            On Error GoTo 0
            If Not GetQueryFromGroup Is Nothing Then Exit Function
        End If
    Next conn
    
    ' Fallback search through all worksheets
    For Each ws In ThisWorkbook.Worksheets
        On Error Resume Next
        Set GetQueryFromGroup = ws.ListObjects(queryName)
        On Error GoTo 0
        If Not GetQueryFromGroup Is Nothing Then Exit Function
    Next ws
    
    MsgBox "Query '" & queryName & "' not found in group '" & groupName & "'", vbExclamation
End Function

Function AddToList(existingList As String, newItem As String) As String
    If existingList = "" Then
        AddToList = newItem
    Else
        AddToList = existingList & ", " & newItem
    End If
End Function
