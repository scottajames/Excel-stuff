Sub CombinedImportAndValidation()
    On Error GoTo ErrorHandler
    
    Dim wsOutput As Worksheet, wsSummary As Worksheet, wsMapping As Worksheet
    Dim lastRow As Long, i As Long, duRow As Long, hrRow As Long, col As Integer
    Dim needsDefault As Boolean, found As Boolean
    Dim orgLevel As String, unitToCheck As String
    Dim rolesFound As String, rankFound As String
    Dim defaultUnitQuery As ListObject, hrFeedQuery As ListObject
    Dim defaultUnitArray As Variant, hrFeedArray As Variant
    Dim queryAvailable As Boolean
    
    ' Set worksheets
    Set wsOutput = GetWorksheet("OUTPUT")
    Set wsSummary = GetWorksheet("SUMMARY")
    Set wsMapping = GetWorksheet("MAPPING")
    If wsOutput Is Nothing Or wsSummary Is Nothing Or wsMapping Is Nothing Then Exit Sub
    
    ' Get queries from Mapping folder (Power Query group)
    Set defaultUnitQuery = GetQueryFromPQGroup("DEFAULTUNIT_CHECK", "Mapping")
    Set hrFeedQuery = GetQueryFromPQGroup("HR_Feed", "Mapping")
    
    ' Check query availability
    queryAvailable = Not (defaultUnitQuery Is Nothing Or hrFeedQuery Is Nothing)
    If Not queryAvailable Then
        If MsgBox("Queries not found in Mapping folder. Continue with import only?", vbQuestion + vbYesNo) = vbNo Then
            Exit Sub
        End If
    Else
        ' Load query data into arrays
        On Error Resume Next
        defaultUnitArray = defaultUnitQuery.DataBodyRange.Value
        hrFeedArray = hrFeedQuery.DataBodyRange.Value
        If Err.Number <> 0 Then
            queryAvailable = False
            MsgBox "Error loading query data. Continuing with import only.", vbExclamation
        End If
        On Error GoTo 0
    End If
    
    Application.ScreenUpdating = False
    
    ' ===== PART 1: IMPORT FROM SUMMARY TO OUTPUT =====
    lastRow = GetLastRow(wsSummary, "A")
    
    ' Clear target columns
    wsOutput.Range("D2:D" & lastRow).ClearContents
    wsOutput.Range("E2:E" & lastRow).ClearContents
    wsOutput.Range("J2:J" & lastRow).ClearContents
    
    ' Process import
    For i = 2 To lastRow
        needsDefault = False
        
        ' Column D: R→S→T→U→V
        For col = 18 To 22
            If Not IsEmpty(wsSummary.Cells(i, col)) Then
                wsOutput.Cells(i, 4).Value = wsSummary.Cells(i, col).Value
                needsDefault = True
                Exit For
            End If
        Next col
        
        ' Column E: I
        If Not IsEmpty(wsSummary.Cells(i, 9)) Then
            wsOutput.Cells(i, 5).Value = wsSummary.Cells(i, 9).Value
            needsDefault = True
        End If
        
        ' Column J: H→G→F→E→D
        For col = 8 To 4 Step -1
            If Not IsEmpty(wsSummary.Cells(i, col)) Then
                wsOutput.Cells(i, 10).Value = wsSummary.Cells(i, col).Value
                needsDefault = True
                Exit For
            End If
        Next col
        
        If IsEmpty(wsOutput.Cells(i, 10)) And Not IsEmpty(wsSummary.Cells(i, 4)) Then
            wsOutput.Cells(i, 10).Value = wsSummary.Cells(i, 4).Value
            needsDefault = True
        End If
        
        ' Set defaults
        If needsDefault Then
            wsOutput.Cells(i, 1).Value = "XXC_MPS_CONNECT_DEFAULTUNIT"
            wsOutput.Cells(i, 8).Value = "Y"
            wsOutput.Cells(i, 9).Value = "XXC_MPS_CONNECT_DEFAULTUNIT"
        Else
            wsOutput.Cells(i, 1).ClearContents
            wsOutput.Cells(i, 8).ClearContents
            wsOutput.Cells(i, 9).ClearContents
        End If
    Next i
    
    ' ===== PART 2: VALIDATE MAPPING DATA =====
    If queryAvailable Then
        lastRow = GetLastRow(wsMapping, "J")
        
        For i = 2 To lastRow
            rolesFound = ""
            rankFound = ""
            unitToCheck = wsMapping.Cells(i, "J").Value
            
            If Not IsEmpty(unitToCheck) Then
                ' Search DEFAULTUNIT_CHECK (J → K)
                For duRow = LBound(defaultUnitArray, 1) To UBound(defaultUnitArray, 1)
                    If CStr(defaultUnitArray(duRow, 10)) = CStr(unitToCheck) Then
                        orgLevel = CStr(defaultUnitArray(duRow, 11))
                        
                        ' Search HR_Feed (H-Q → AG and C)
                        For hrRow = LBound(hrFeedArray, 1) To UBound(hrFeedArray, 1)
                            For col = 8 To 17
                                If CStr(hrFeedArray(hrRow, col)) = orgLevel Then
                                    ' Security Roles (AG)
                                    If Not IsEmpty(hrFeedArray(hrRow, 33)) Then
                                        rolesFound = AddToList(rolesFound, CStr(hrFeedArray(hrRow, 33)))
                                    End If
                                    ' Rank (C)
                                    If rankFound = "" And Not IsEmpty(hrFeedArray(hrRow, 3)) Then
                                        rankFound = CStr(hrFeedArray(hrRow, 3))
                                    End If
                                    Exit For
                                End If
                            Next col
                        Next hrRow
                        
                        ' Update MAPPING
                        wsMapping.Cells(i, "K").Value = rolesFound
                        wsMapping.Cells(i, "I").Value = rankFound
                        Exit For
                    End If
                Next duRow
            End If
            
            ' Clear if no match
            If rolesFound = "" Then wsMapping.Cells(i, "K").ClearContents
            If rankFound = "" Then wsMapping.Cells(i, "I").ClearContents
        Next i
    End If
    
    Application.ScreenUpdating = True
    MsgBox "Process completed:" & vbCrLf & _
          "• Imported " & GetLastRow(wsSummary, "A") - 1 & " rows to OUTPUT" & vbCrLf & _
          "• Validated " & GetLastRow(wsMapping, "J") - 1 & " rows in MAPPING", vbInformation
    Exit Sub
    
ErrorHandler:
    Application.ScreenUpdating = True
    MsgBox "Error in row " & i & ": " & Err.Description, vbCritical
End Sub

' ===== IMPROVED QUERY LOCATOR =====
Function GetQueryFromPQGroup(queryName As String, groupName As String) As ListObject
    Dim conn As WorkbookConnection
    Dim lo As ListObject
    
    ' First try to find connection with group prefix
    On Error Resume Next
    For Each conn In ThisWorkbook.Connections
        If conn.Name = groupName & "\" & queryName Then
            Set GetQueryFromPQGroup = ThisWorkbook.Sheets(conn.WorksheetConnection.Parent.Name).ListObjects(queryName)
            Exit For
        End If
    Next conn
    
    ' If not found, try direct name (some versions don't include group in connection name)
    If GetQueryFromPQGroup Is Nothing Then
        For Each lo In ThisWorkbook.Sheets(1).Parent.ListObjects ' Check all sheets
            If lo.Name = queryName Then
                Set GetQueryFromPQGroup = lo
                Exit For
            End If
        Next lo
    End If
    On Error GoTo 0
End Function

' ===== HELPER FUNCTIONS =====
Function GetWorksheet(sheetName As String) As Worksheet
    On Error Resume Next
    Set GetWorksheet = ThisWorkbook.Sheets(sheetName)
    On Error GoTo 0
    If GetWorksheet Is Nothing Then MsgBox "Sheet '" & sheetName & "' not found!", vbExclamation
End Function

Function GetLastRow(ws As Worksheet, col As String) As Long
    On Error Resume Next
    GetLastRow = ws.Cells(ws.Rows.Count, col).End(xlUp).Row
    If GetLastRow < 2 Then GetLastRow = 2
    On Error GoTo 0
End Function

Function AddToList(existingList As String, newItem As String) As String
    If existingList = "" Then
        AddToList = newItem
    Else
        AddToList = existingList & ", " & newItem
    End If
End Function
