<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Hierarchy Visualizer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }

        #visualization {
            min-height: 500px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            padding: 20px;
            background-color: white;
        }

        .node {
            padding: 8px 12px;
            border-radius: 4px;
            margin: 5px;
            display: inline-block;
            font-weight: 500;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .constable {
            background-color: #4e79a7;
            color: white;
        }

        .sergeant {
            background-color: #f28e2b;
            color: white;
        }

        .inspector {
            background-color: #e15759;
            color: white;
        }

        .other {
            background-color: #76b7b2;
            color: white;
        }

        .legend-item {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }

        .legend-color {
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border-radius: 3px;
        }

        .error-message {
            color: #dc3545;
            font-weight: bold;
        }

        .debug-info {
            font-family: monospace;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-top: 20px;
            font-size: 0.9em;
            max-height: 200px;
            overflow-y: auto;
        }

        .node-count {
            font-size: 0.8em;
            opacity: 0.7;
            margin-left: 5px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Database Hierarchy Visualizer</h1>
        
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Upload Excel File</h5>
                <input type="file" id="excelFile" class="form-control" accept=".xlsx, .xls">
                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" id="debugCheck">
                    <label class="form-check-label" for="debugCheck">
                        Show debug information
                    </label>
                </div>
                <button id="processBtn" class="btn btn-primary mt-3">Process File</button>
            </div>
        </div>
        
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Hierarchy Visualization</h5>
                <div id="visualization" class="mt-3">
                    <p>Upload an Excel file to see the hierarchy visualization.</p>
                </div>
                <div id="debugOutput" class="debug-info" style="display: none;"></div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Legend</h5>
                <div class="legend-item"><span class="legend-color constable"></span> Constable (No suffix)</div>
                <div class="legend-item"><span class="legend-color sergeant"></span> Sergeant (DS/Sgt suffix)</div>
                <div class="legend-item"><span class="legend-color inspector"></span> Inspector (DI/Insp suffix)</div>
                <div class="legend-item"><span class="legend-color other"></span> Other Ranks</div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        document.getElementById('processBtn').addEventListener('click', processExcelFile);
        document.getElementById('debugCheck').addEventListener('change', function() {
            document.getElementById('debugOutput').style.display = this.checked ? 'block' : 'none';
        });

        function processExcelFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            const debugOutput = document.getElementById('debugOutput');
            debugOutput.innerHTML = '';
            
            if (!file) {
                showError('Please select an Excel file first.');
                return;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // Debug: Show sheet names
                    debugOutput.innerHTML += `<p>Sheets found: ${workbook.SheetNames.join(', ')}</p>`;
                    
                    // Try to find Sheet1 and Sheet2 (case insensitive)
                    const sheetNames = workbook.SheetNames.map(name => name.toLowerCase());
                    const sheet1Index = sheetNames.findIndex(name => name.includes('sheet1') || name.includes('sheet 1'));
                    const sheet2Index = sheetNames.findIndex(name => name.includes('sheet2') || name.includes('sheet 2'));
                    
                    if (sheet1Index === -1 || sheet2Index === -1) {
                        showError('Could not find both Sheet1 and Sheet2 in the Excel file.');
                        debugOutput.innerHTML += `<p>Sheet names found: ${workbook.SheetNames.join(', ')}</p>`;
                        return;
                    }
                    
                    const sheet1 = workbook.Sheets[workbook.SheetNames[sheet1Index]];
                    const sheet2 = workbook.Sheets[workbook.SheetNames[sheet2Index]];
                    
                    const sheet1Json = XLSX.utils.sheet_to_json(sheet1);
                    const sheet2Json = XLSX.utils.sheet_to_json(sheet2);
                    
                    debugOutput.innerHTML += `<p>Sheet1 first row: ${JSON.stringify(sheet1Json[0])}</p>`;
                    debugOutput.innerHTML += `<p>Sheet2 first row: ${JSON.stringify(sheet2Json[0])}</p>`;
                    
                    // Create hierarchy data from Sheet1 with specific headers
                    const hierarchyData = createHierarchyFromSheet1(sheet1Json);
                    debugOutput.innerHTML += `<p>Hierarchy data: ${JSON.stringify(hierarchyData)}</p>`;
                    
                    if (hierarchyData.length === 0) {
                        showError('No hierarchy relationships found in Sheet1. Please check for "Worktray - DB Value" (child) and "Parent - DB Value" (parent) columns.');
                        return;
                    }
                    
                    // Create rank map from Sheet2 column A
                    const rankMap = createRankMapFromSheet2(sheet2Json);
                    debugOutput.innerHTML += `<p>Rank map sample: ${JSON.stringify(Object.entries(rankMap).slice(0, 5))}</p>`;
                    
                    // Apply ranks to hierarchy
                    applyRanksToHierarchy(hierarchyData, rankMap);
                    
                    // Visualize the hierarchy
                    visualizeHierarchy(hierarchyData);
                    
                } catch (error) {
                    showError('Error processing Excel file: ' + error.message);
                    debugOutput.innerHTML += `<p class="error-message">Error: ${error.stack}</p>`;
                }
            };
            
            reader.onerror = function() {
                showError('Error reading the file.');
            };
            
            reader.readAsArrayBuffer(file);
        }

        function showError(message) {
            const container = document.getElementById('visualization');
            container.innerHTML = `<p class="error-message">${message}</p>`;
        }

        function createHierarchyFromSheet1(sheet1Data) {
            const nodes = {};
            const links = [];
            const occurrenceCount = {};
            
            // Find the correct headers
            const childHeader = findHeader(sheet1Data[0], "Worktray - DB Value");
            const parentHeader = findHeader(sheet1Data[0], "Parent - DB Value");
            
            if (!childHeader || !parentHeader) {
                return [];
            }
            
            // First pass: count occurrences and create unique nodes
            sheet1Data.forEach(row => {
                const child = row[childHeader];
                const parent = row[parentHeader];
                
                if (child !== undefined && child !== null) {
                    const childStr = String(child).trim();
                    occurrenceCount[childStr] = (occurrenceCount[childStr] || 0) + 1;
                    
                    if (!nodes[childStr]) {
                        nodes[childStr] = {
                            id: childStr,
                            rank: 1, // Default rank
                            count: 0
                        };
                    }
                }
                
                if (parent !== undefined && parent !== null) {
                    const parentStr = String(parent).trim();
                    occurrenceCount[parentStr] = (occurrenceCount[parentStr] || 0) + 1;
                    
                    if (!nodes[parentStr]) {
                        nodes[parentStr] = {
                            id: parentStr,
                            rank: 1, // Default rank
                            count: 0
                        };
                    }
                }
            });
            
            // Second pass: create relationships (only unique ones)
            const uniqueLinks = new Set();
            sheet1Data.forEach(row => {
                const child = row[childHeader];
                const parent = row[parentHeader];
                
                if (child !== undefined && child !== null && parent !== undefined && parent !== null) {
                    const childStr = String(child).trim();
                    const parentStr = String(parent).trim();
                    const linkKey = `${parentStr}->${childStr}`;
                    
                    if (!uniqueLinks.has(linkKey)) {
                        uniqueLinks.add(linkKey);
                        links.push({
                            source: parentStr,
                            target: childStr
                        });
                        
                        // Update counts
                        nodes[childStr].count = occurrenceCount[childStr];
                        nodes[parentStr].count = occurrenceCount[parentStr];
                    }
                }
            });
            
            // Find root nodes (nodes with no parents)
            const nodeIds = Object.keys(nodes);
            const rootNodes = nodeIds.filter(id => {
                return !links.some(link => link.target === id);
            });
            
            // Build hierarchical structure
            function buildHierarchy(id) {
                const node = nodes[id];
                const children = links
                    .filter(link => link.source === id)
                    .map(link => buildHierarchy(link.target));
                    
                return {
                    ...node,
                    children: children.length ? children : null
                };
            }
            
            return rootNodes.map(root => buildHierarchy(root));
        }

        function createRankMapFromSheet2(sheet2Data) {
            const rankMap = {};
            
            // Find column A (first column)
            const columnAKey = Object.keys(sheet2Data[0] || {})[0] || 'A';
            
            sheet2Data.forEach(row => {
                const key = row[columnAKey];
                if (key === undefined || key === null) return;
                
                const keyStr = String(key).trim();
                
                if (/(DS|Sgt)/i.test(keyStr)) {
                    rankMap[keyStr] = 'sergeant'; // Sergeant rank
                } else if (/(DI|Insp)/i.test(keyStr)) {
                    rankMap[keyStr] = 'inspector'; // Inspector rank
                } else {
                    rankMap[keyStr] = 'constable'; // Constable rank (default)
                }
            });
            
            return rankMap;
        }

        function applyRanksToHierarchy(hierarchyData, rankMap) {
            function applyRank(node) {
                if (rankMap[node.id]) {
                    node.rank = rankMap[node.id];
                }
                
                if (node.children) {
                    node.children.forEach(child => applyRank(child));
                }
            }
            
            hierarchyData.forEach(root => applyRank(root));
        }

        function findHeader(row, headerName) {
            if (!row) return null;
            const lowerHeader = headerName.toLowerCase();
            return Object.keys(row).find(key => key.toLowerCase().includes(lowerHeader));
        }

        function visualizeHierarchy(data) {
            const container = document.getElementById('visualization');
            container.innerHTML = '';
            
            if (data.length === 0) {
                container.innerHTML = '<p class="error-message">No hierarchy data found.</p>';
                return;
            }
            
            // Track which nodes we've already displayed
            const displayedNodes = new Set();
            
            // Simple nested list visualization
            function createNodeElement(item) {
                // Skip if we've already displayed this node
                if (displayedNodes.has(item.id)) {
                    return null;
                }
                displayedNodes.add(item.id);
                
                const node = document.createElement('div');
                const rankClass = item.rank || 'other';
                node.className = `node ${rankClass}`;
                
                // Add the name and occurrence count if > 1
                const nameSpan = document.createElement('span');
                nameSpan.textContent = item.id;
                node.appendChild(nameSpan);
                
                if (item.count > 1) {
                    const countSpan = document.createElement('span');
                    countSpan.className = 'node-count';
                    countSpan.textContent = `(${item.count} occurrences)`;
                    node.appendChild(countSpan);
                }
                
                if (item.children) {
                    const childrenContainer = document.createElement('div');
                    childrenContainer.style.marginLeft = '20px';
                    childrenContainer.style.marginTop = '5px';
                    
                    item.children.forEach(child => {
                        const childElement = createNodeElement(child);
                        if (childElement) {
                            childrenContainer.appendChild(childElement);
                        }
                    });
                    
                    if (childrenContainer.children.length > 0) {
                        node.appendChild(childrenContainer);
                    }
                }
                
                return node;
            }
            
            data.forEach(root => {
                const rootElement = createNodeElement(root);
                if (rootElement) {
                    container.appendChild(rootElement);
                }
            });
        }
    </script>
</body>
</html>
