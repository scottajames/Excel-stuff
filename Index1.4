<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Tray & Rank Hierarchy Visualizer</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
<style>
    body { background-color: #f8f9fa; padding-bottom: 50px; }
    #visualization { min-height: 500px; border: 1px dashed #ccc; border-radius: 5px; padding: 20px; background-color: white; }
    .node { padding: 8px 12px; border-radius: 4px; margin: 5px 0; display: inline-block; font-weight: 500; box-shadow: 0 2px 4px rgba(0,0,0,0.1); cursor: pointer; transition: all 0.2s; position: relative; }
    .node:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); }
    .staff { background-color: #59a14f; color: white; }
    .constable { background-color: #4e79a7; color: white; }
    .sergeant { background-color: #f28e2b; color: white; }
    .inspector { background-color: #e15759; color: white; }
    .chief-inspector { background-color: #b07aa1; color: white; }
    .other-police { background-color: #76b7b2; color: white; }
    .tray { background-color: #8c564b; color: white; }
    .bottom-tier { background-color: #6c757d; color: white; }
    .children { margin-left: 20px; border-left: 2px solid #ddd; padding-left: 10px; }
    .tray-chain .node::before { content: ""; position: absolute; left: -10px; top: 50%; width: 10px; height: 2px; background-color: #ccc; }
    .tray-name { font-weight: bold; margin-bottom: 5px; cursor: pointer; }
    #dropZone { border: 3px dashed #999; padding: 40px; text-align: center; font-size: 1.2rem; color: #555; border-radius: 10px; background-color: #fafafa; cursor: pointer; transition: all 0.3s; }
    #dropZone.dragover { background-color: #e0f7fa; border-color: #00796b; color: #00796b; }
    #loadingIndicator { display: none; text-align: center; margin: 20px 0; }
    .spinner-border { width: 3rem; height: 3rem; }
    .error-message { color: #dc3545; font-weight: bold; margin-top: 10px; }
    .collapsed .children { display: none; }
    .toggle-icon { margin-right: 8px; }
    .empty-state { text-align: center; padding: 40px; color: #6c757d; }
    .person-count { 
        position: absolute;
        right: -10px;
        top: -10px;
        background-color: #343a40;
        color: white;
        border-radius: 50%;
        width: 22px;
        height: 22px;
        font-size: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
    .node.has-count { padding-right: 20px; }
</style>
</head>
<body>
<div class="container mt-5">
    <h1 class="mb-4">Tray & Rank Hierarchy Visualizer</h1>
    <div class="alert alert-info">
        <h5>📋 How to Use</h5>
        <ol>
            <li><strong>Find your Excel file</strong> containing tray data.</li>
            <li><strong>Drag & drop</strong> it into the box below <em>or</em> click to select.</li>
            <li>Wait a moment — results will load automatically!</li>
        </ol>
        <p class="mt-2 mb-0"><strong>Note:</strong> The small numbers show how many people are in each tray/rank.</p>
    </div>

    <div id="dropZone">
        <div id="dropZoneContent">
            <i class="fas fa-cloud-upload-alt fa-3x mb-3"></i>
            <p>📂 Drag & drop Excel file here or click to select</p>
        </div>
    </div>
    <div id="errorMessage" class="error-message"></div>

    <div id="loadingIndicator">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Processing your file...</p>
    </div>

    <div id="fileStats" class="mt-3"></div>
    <div id="visualization" class="mt-4">
        <div class="empty-state">
            <i class="fas fa-file-excel fa-3x mb-3"></i>
            <p>No data yet. Upload an Excel file to see the hierarchy visualization.</p>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script>
const RANK_ORDER = ["Constable","Sergeant","Inspector","Chief Inspector"];
const RANK_PATTERNS = {
    "Constable": [/Constable/i,/^E$/i,/^K1$/i,/^W$/i,/^I$/i,/PC\b/i,/CSgt/i],
    "Sergeant": [/Sergeant/i,/^D$/i,/^K2$/i,/^N$/i,/^P$/i,/^Q$/i,/Sgt/i,/DS\b/i,/PS\b/i],
    "Inspector": [/Inspector/i,/^C$/i,/^M$/i,/^V$/i,/Insp/i,/DI\b/i],
    "Chief Inspector": [/Chief Inspector/i,/^B$/i,/^J$/i,/^L$/i,/^U$/i,/^A$/i,/^H$/i,/^S$/i,/^B1$/i,/^BB1$/i,/CI\b/i]
};
const RANK_CLASSES = {
    "Constable": "constable",
    "Sergeant": "sergeant",
    "Inspector": "inspector",
    "Chief Inspector": "chief-inspector",
    "Tray": "tray",
    "BottomTier": "bottom-tier"
};

let trayItems = [];
const dropZone = document.getElementById('dropZone');
const loadingIndicator = document.getElementById('loadingIndicator');
const errorMessage = document.getElementById('errorMessage');
const visualization = document.getElementById('visualization');

dropZone.addEventListener('click', () => {
    const fileInput = document.createElement('input');
    fileInput.type = 'file';
    fileInput.accept = '.xlsx,.xls';
    fileInput.onchange = () => { if (fileInput.files.length) handleFile(fileInput.files[0]); };
    fileInput.click();
});

dropZone.addEventListener('dragover', e => { e.preventDefault(); dropZone.classList.add('dragover'); });
dropZone.addEventListener('dragleave', () => { dropZone.classList.remove('dragover'); });
dropZone.addEventListener('drop', e => {
    e.preventDefault(); 
    dropZone.classList.remove('dragover');
    if (e.dataTransfer.files.length) handleFile(e.dataTransfer.files[0]);
});

function showLoading() { loadingIndicator.style.display='block'; visualization.innerHTML=''; errorMessage.textContent=''; }
function hideLoading() { loadingIndicator.style.display='none'; }
function showError(message) {
    errorMessage.textContent=message;
    visualization.innerHTML=`<div class="empty-state"><i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i><p>${message}</p></div>`;
}

function handleFile(file) {
    if (!file.name.match(/\.(xlsx|xls)$/i)) { showError("⚠️ Please upload an Excel file (.xlsx or .xls)"); return; }
    showLoading();
    const reader = new FileReader();
    reader.onload = e => {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type:'array' });
            if (workbook.SheetNames.length < 2) { showError("⚠️ Excel file needs at least two sheets."); return; }
            const sheet1 = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]]);
            const sheet2 = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[1]]);
            if (!sheet2.length) { showError("⚠️ Second sheet is empty."); return; }
            const personCounts = countPeopleInTrays(sheet1);
            trayItems = processTrayData(sheet2, personCounts);
            document.getElementById('fileStats').innerHTML = `<strong>Total trays:</strong> ${trayItems.length}<br><strong>Total people:</strong> ${Object.values(personCounts).reduce((a,b)=>a+b,0)}`;
            visualizeHierarchy(trayItems);
        } catch(err) { showError("⚠️ Error reading the file: " + err.message); console.error(err); }
        finally { hideLoading(); }
    };
    reader.onerror = () => { showError("⚠️ Error reading the file."); hideLoading(); };
    reader.readAsArrayBuffer(file);
}

function countPeopleInTrays(sheetData) {
    const counts={}; if (!sheetData.length) return counts;
    const headers = Object.keys(sheetData[0]);
    const trayHeader = headers[0];
    const countHeader = headers.length>1?headers[1]:null;
    sheetData.forEach(row=>{
        const trayName=String(row[trayHeader]||'').trim();
        if(!trayName) return;
        let count=1;
        if(countHeader && row[countHeader]!==undefined) count=parseInt(row[countHeader])||1;
        counts[trayName]=(counts[trayName]||0)+count;
    });
    return counts;
}

function processTrayData(sheetData, personCounts) {
    const items = [];
    const trayHeader = Object.keys(sheetData[0])[0];

    sheetData.forEach(row => {
        const trayName = String(row[trayHeader]||'').trim();
        if(!trayName) return;
        // Skip unwanted trays
        if(/PMPOT|-SEC|EXPIRED/i.test(trayName)) return;

        const rankInfo = detectRankFromTrayName(trayName);
        const baseName = trayName; // keep full name for simplicity
        items.push({
            name: trayName,
            baseName,
            rank: rankInfo.rank,
            rankGroup: rankInfo.group,
            rankClass: rankInfo.class,
            count: personCounts[trayName] || 0
        });
    });
    return items;
}

function detectRankFromTrayName(trayName) {
    const hasSergeant = /sergeant|sgt|ds\b|ps\b|^d$|^k2$|^n$|^p$|^q$/i.test(trayName);
    const hasInspector = /inspector|insp|di\b|^c$|^m$|^v$/i.test(trayName);
    const hasChiefInspector = /chief inspector|ci\b|^b$|^j$|^l$|^u$|^a$|^h$|^s$|^b1$|^bb1$/i.test(trayName);

    if(!hasSergeant && !hasInspector && !hasChiefInspector){
        return { rank:'Bottom Tier', group:'BottomTier', class:'bottom-tier' };
    }

    for(const [group, patterns] of Object.entries(RANK_PATTERNS)){
        for(const pattern of patterns){
            if(pattern.test(trayName)){
                return { rank: trayName.match(pattern)[0], group, class: RANK_CLASSES[group] };
            }
        }
    }
    return { rank:'', group:'Tray', class:'tray' };
}

function visualizeHierarchy(items){
    if(!items.length){
        visualization.innerHTML=`<div class="empty-state"><i class="fas fa-box-open fa-3x mb-3"></i><p>No trays to display.</p></div>`;
        return;
    }
    visualization.innerHTML='';
    // Sort: bottom tier last
    items.sort((a,b)=>{
        if(a.rankGroup==='BottomTier') return 1;
        if(b.rankGroup==='BottomTier') return -1;
        return RANK_ORDER.indexOf(a.rankGroup) - RANK_ORDER.indexOf(b.rankGroup);
    });

    const container = document.createElement('div');
    container.classList.add('tray-chain');
    items.forEach(item=>{
        const node = document.createElement('div');
        node.classList.add('node', item.rankClass);
        if(item.count>0) node.classList.add('has-count');
        node.innerHTML = `<span class="tray-name">${item.name}</span>${item.count>0?`<span class="person-count">${item.count}</span>`:''}`;
        container.appendChild(node);
    });
    visualization.appendChild(container);
}
</script>
</body>
</html>
