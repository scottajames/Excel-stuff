<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Hierarchy Visualizer</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }

        #visualization {
            min-height: 500px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            padding: 20px;
        }

        .node {
            padding: 8px 12px;
            border-radius: 4px;
            margin: 5px;
            display: inline-block;
            font-weight: 500;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .first {
            background-color: #4e79a7;
            color: white;
        }

        .second {
            background-color: #f28e2b;
            color: white;
        }

        .third {
            background-color: #e15759;
            color: white;
        }

        .other {
            background-color: #76b7b2;
            color: white;
        }

        .legend-item {
            margin-bottom: 8px;
            display: flex;
            align-items: center;
        }

        .legend-color {
            display: inline-block;
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border-radius: 3px;
        }

        .link {
            stroke: #999;
            stroke-width: 1.5px;
        }

        /* Hierarchy tree styling */
        .tree-container {
            width: 100%;
            overflow: auto;
        }

        .tree-node {
            cursor: pointer;
        }

        .tree-node circle {
            fill: #fff;
            stroke: steelblue;
            stroke-width: 2px;
        }

        .tree-node text {
            font: 12px sans-serif;
        }

        .tree-link {
            fill: none;
            stroke: #ccc;
            stroke-width: 1.5px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h1 class="mb-4">Database Hierarchy Visualizer</h1>
        
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Upload Excel File</h5>
                <input type="file" id="excelFile" class="form-control" accept=".xlsx, .xls">
                <button id="processBtn" class="btn btn-primary mt-3">Process File</button>
            </div>
        </div>
        
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Hierarchy Visualization</h5>
                <div id="visualization" class="mt-3">
                    <p>Upload an Excel file to see the hierarchy visualization.</p>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Legend</h5>
                <div class="legend-item"><span class="legend-color first"></span> First Rank (No suffix)</div>
                <div class="legend-item"><span class="legend-color second"></span> Second Rank (PS suffix)</div>
                <div class="legend-item"><span class="legend-color third"></span> Third Rank (Insp suffix)</div>
                <div class="legend-item"><span class="legend-color other"></span> Other Ranks (Inebriated ranks)</div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        document.getElementById('processBtn').addEventListener('click', processExcelFile);

        function processExcelFile() {
            const fileInput = document.getElementById('excelFile');
            const file = fileInput.files[0];
            
            if (!file) {
                alert('Please select an Excel file first.');
                return;
            }
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                
                // Process Sheet2 for hierarchy
                const sheet2 = workbook.Sheets[workbook.SheetNames[1]]; // Assuming Sheet2 is the second sheet
                const sheet2Json = XLSX.utils.sheet_to_json(sheet2);
                
                // Process Sheet1 for ranks
                const sheet1 = workbook.Sheets[workbook.SheetNames[0]]; // Assuming Sheet1 is the first sheet
                const sheet1Json = XLSX.utils.sheet_to_json(sheet1);
                
                // Create a map of items to their ranks
                const rankMap = createRankMap(sheet1Json);
                
                // Create hierarchy data
                const hierarchyData = createHierarchy(sheet2Json, rankMap);
                
                // Visualize the hierarchy
                visualizeHierarchy(hierarchyData);
            };
            
            reader.readAsArrayBuffer(file);
        }

        function createRankMap(sheet1Data) {
            const rankMap = {};
            
            sheet1Data.forEach(row => {
                const key = row['A']; // Column A
                if (!key) return;
                
                if (key.endsWith('PS')) {
                    rankMap[key] = 2; // Second rank
                } else if (key.endsWith('Insp')) {
                    rankMap[key] = 3; // Third rank
                } else if (key.includes('inebriated')) {
                    // Handle inebriated ranks - you'll need to define specific rules
                    rankMap[key] = 4; // Example - adjust as needed
                } else {
                    rankMap[key] = 1; // First rank (default)
                }
            });
            
            return rankMap;
        }

        function createHierarchy(sheet2Data, rankMap) {
            const nodes = {};
            const links = [];
            
            // First pass: create all nodes
            sheet2Data.forEach(row => {
                const child = row['O']; // Column O
                const parent = row['P']; // Column P
                
                if (child && !nodes[child]) {
                    nodes[child] = {
                        id: child,
                        rank: rankMap[child] || 1 // Default to first rank if not found
                    };
                }
                
                if (parent && !nodes[parent]) {
                    nodes[parent] = {
                        id: parent,
                        rank: rankMap[parent] || 1 // Default to first rank if not found
                    };
                }
                
                if (child && parent) {
                    links.push({
                        source: parent,
                        target: child
                    });
                }
            });
            
            // Find root nodes (nodes with no parents)
            const nodeIds = Object.keys(nodes);
            const rootNodes = nodeIds.filter(id => {
                return !links.some(link => link.target === id);
            });
            
            // Build hierarchical structure
            function buildHierarchy(id) {
                const node = nodes[id];
                const children = links
                    .filter(link => link.source === id)
                    .map(link => buildHierarchy(link.target));
                    
                return {
                    ...node,
                    children: children.length ? children : null
                };
            }
            
            return rootNodes.map(root => buildHierarchy(root));
        }

        function visualizeHierarchy(data) {
            const container = document.getElementById('visualization');
            container.innerHTML = '';
            
            if (data.length === 0) {
                container.innerHTML = '<p>No hierarchy data found in the Excel file.</p>';
                return;
            }
            
            // Simple nested list visualization
            function createNodeElement(item) {
                const node = document.createElement('div');
                const rankClass = getRankClass(item.rank);
                node.className = `node ${rankClass}`;
                node.textContent = item.id;
                
                if (item.children) {
                    const childrenContainer = document.createElement('div');
                    childrenContainer.style.marginLeft = '20px';
                    childrenContainer.style.marginTop = '5px';
                    
                    item.children.forEach(child => {
                        childrenContainer.appendChild(createNodeElement(child));
                    });
                    
                    node.appendChild(childrenContainer);
                }
                
                return node;
            }
            
            data.forEach(root => {
                container.appendChild(createNodeElement(root));
            });
        }

        function getRankClass(rank) {
            switch(rank) {
                case 1: return 'first';
                case 2: return 'second';
                case 3: return 'third';
                default: return 'other';
            }
        }
    </script>
</body>
</html>
